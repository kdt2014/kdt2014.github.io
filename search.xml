<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>百度网盘下载</title>
    <url>/posts/5a555b60/</url>
    <content><![CDATA[<p>百度网盘下载是一个非高频使用场景，但是每次下载一些文件的时候只有一个百度网盘的链接。没有会员下载速度就非常难受，因此就各种谷歌百度，找到了使用IDM下载的方法。</p>
<ul>
<li><p>首先安装油猴插件，<a href="https://www.tampermonkey.net/">tampermonkey</a>。点击前面的链接就可以进入官网，在浏览器上安装插件。</p>
</li>
<li><p>插件安装好了之后进入<a href="https://greasyfork.org/zh-CN">greasyfork</a>，安装我们需要的小程序。在搜索框中输入“百度网盘”，找到作者为“软件小妹妹”的那一个小程序。点进去，然后按照作者的说明一步一步来就行。</p>
</li>
</ul>
<p>亲测可以快速下载，速度大概在5-6MB&#x2F;S，虽然没有开会员那种几十M的速度，但是也比不开会员100KB&#x2F;s强太多了。</p>
<p>这篇文章是给我自己用的，因为自己换电脑的时候总是要半天才想起来怎么设置。如果对你也有用，那我也很开心。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title>Deeplearning on Windows with WSL2 pytorch - Using Pycharm as the IDE</title>
    <url>/posts/b96fcdf1/</url>
    <content><![CDATA[<h2 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h2><ul>
<li>Preface</li>
<li>Install WSL</li>
<li>WSL installs Anaconda and configures the environment</li>
<li>Pycharm connects to WSL and uses the environment generated by conda</li>
</ul>
<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>Generally speaking, the efficiency of deep learning training under Linux system is higher than that of Windows system, and everyone usually uses Ubuntu, a common distribution of Linux. But Ubuntu is not very friendly to everyday use, so there is a compromise and use Windows Subsystem Linux (WSL).</p>
<p>After testing, the training efficiency in WSL is about 25% better than Windows. CUDA118 is used in the following tests, the only difference is that the Python version is 3.9 and the other is 3.10.</p>
<p><img src="https://s2.loli.net/2023/03/22/PQYkfEWDysUcCNZ.png" alt="Windows" title="Windows_cu118_py39"></p>
<p><img src="https://s2.loli.net/2023/03/22/ojpRTbrQJi4D1e8.png" alt="ubuntu20" title="ubuntu20.04_cu118_py39"></p>
<p><img src="https://s2.loli.net/2023/03/22/O3Q95mYxHWcB1GT.png" alt="ubuntu22" title="ubuntu22.04_cu118_py310"></p>
<p><img src="https://s2.loli.net/2023/03/22/oaiBn6FWzmxcbHf.png" alt="interpreter" title="Python Interpreter"></p>
<p>Video tutorial links：<a href="https://www.bilibili.com/video/BV1ok4y1t7XC/">Bilibili</a>，<a href="https://youtu.be/buyogP-KS5w">Youtube</a></p>
<h2 id="Install-WSL"><a href="#Install-WSL" class="headerlink" title="Install WSL"></a>Install WSL</h2><p>This part refers to the previous blog <a href="https://www.gongsunqi.xyz/posts/451c48f3/">Windows 11 installation of WSL2, ROS and window visualization</a>, only need to install WSL2, install ROS part of the part do not care.</p>
<p>You can also find this part in the video tutorial start part.</p>
<h2 id="WSL-installs-Anaconda-and-configures-the-environment"><a href="#WSL-installs-Anaconda-and-configures-the-environment" class="headerlink" title="WSL installs Anaconda and configures the environment"></a>WSL installs Anaconda and configures the environment</h2><p>Open the previously installed Ubuntu system in the terminal that comes with Windows 11, and then the operation is exactly the same as using the command line on the Ubuntu host.</p>
<p><img src="https://s2.loli.net/2023/03/22/ZpNOkRvFwSu8K9H.png"></p>
<ul>
<li>Install Anaconda</li>
</ul>
<p><a href="https://www.anaconda.com/products/distribution">Anaconda3</a> official download, select the Linux version, right-click on it with the mouse, and copy the link.</p>
<p><img src="https://s2.loli.net/2023/03/22/9PVLksuX6BCxaU8.png"></p>
<p>Back in Ubuntu’s terminal, type:</p>
<pre><code>wget https://repo.anaconda.com/archive/Anaconda3-2023.03-Linux-x86_64.sh
</code></pre>
<p>Run the above code and download Anaconda3 to WSL Ubuntu.</p>
<p><img src="https://s2.loli.net/2023/03/22/yemLhduQx1rHBGP.png"></p>
<p>After that, execute:</p>
<pre><code>sh Anaconda3-2023.03-Linux-x86_64.sh
</code></pre>
<p>Just type sh A and press the Tab key, and the system will automatically complete the following content.</p>
<p>The next step is the installation process, just press enter or enter yes when prompted.</p>
<ul>
<li>Conda configures the environment</li>
</ul>
<ol>
<li><p>Conda creates a virtual environment</p>
<pre><code> conda create --name cu118py310 python=3.10  
 conda activate cu118py310 
</code></pre>
<p> <img src="https://s2.loli.net/2023/03/23/imlkrNDYjoqIObA.png" alt="conda env" title="create virtual env"></p>
<p> <img src="https://s2.loli.net/2023/03/23/3ZOdr5pcqtUivIB.png" alt="activate" title="activate env"></p>
<p> <a href="https://blog.csdn.net/u014628771/article/details/80066624">The commonly used conda command</a></p>
</li>
<li><p>Configure pytorch</p>
<p> Go to the <a href="https://pytorch.org/get-started/locally/">pytorch official website</a>, select the desired environment (note that Linux OS is selected here), copy the conda command, paste in terminal, enter, and install the environment:</p>
<p> <img src="https://s2.loli.net/2023/03/22/VWK7jPvda2rwYsg.png"></p>
<pre><code> conda install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia
</code></pre>
<p> <img src="https://s2.loli.net/2023/03/23/DSwiAanLlV98M3j.png" alt="pytorch环境" title="Configure pytorch"></p>
<p> This concludes the environment configuration of WSL.</p>
</li>
</ol>
<h2 id="Pycharm-connects-to-WSL-and-uses-the-environment-generated-by-conda"><a href="#Pycharm-connects-to-WSL-and-uses-the-environment-generated-by-conda" class="headerlink" title="Pycharm connects to WSL and uses the environment generated by conda"></a>Pycharm connects to WSL and uses the environment generated by conda</h2><p>Pycharm Professional Edition (Community Edition and Education Edition do not have convenient WSL function), click the bottom right and select Add New Interpreter, the operation is shown in the following figure:</p>
<p><img src="https://s2.loli.net/2023/03/23/217LZ495MFT6GCu.png" alt="wsl interpreter" title="add wsl interpreter"></p>
<p>Select the Linux_distribution you created and Next:</p>
<p><img src="https://s2.loli.net/2023/03/23/VvnQa8Zr6qYkSPD.png"></p>
<p>Virtualenv Enviroment–Existing – click…– Select this path \wsl$\Ubuntu-22.04\home\username\anaconda3\envs\cu118py310\bin\python3，Create。</p>
<p><img src="https://s2.loli.net/2023/03/23/3r8Fdsbcv7elPZ2.png"></p>
<p>Wait a few moments and the new environment will be configured. Then you can use this environment to train and run!</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Gazebo添加模型</title>
    <url>/posts/cb441177/</url>
    <content><![CDATA[<h1 id="在gazebo中添加模型（图片）"><a href="#在gazebo中添加模型（图片）" class="headerlink" title="在gazebo中添加模型（图片）"></a>在gazebo中添加模型（图片）</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>在使用Gazebo仿真的过程中常常需要导入用户自定义的模型，特别是一些独特的具有严格尺寸的Mark图标(Apritag, Chessboard等)。目前在Gazebo中一共支持3种模型导入方式，分别是urdf， sdf和3D model，其中最简单的是直接通过CAD绘制出相关的3D model后直接导入模型。在本文中将详细描述相关方法，并编写相应的模型描述文件。</p>
<h2 id="2-环境"><a href="#2-环境" class="headerlink" title="2.环境"></a>2.环境</h2><ul>
<li>Ubuntu 18.04</li>
<li>Gazebo 9</li>
<li>Blender 3.4.1</li>
</ul>
<h2 id="3-贴图模型制作"><a href="#3-贴图模型制作" class="headerlink" title="3.贴图模型制作"></a>3.贴图模型制作</h2><p>使用各平台支持良好的免费3D建模软件<a href="https://www.blender.org/">Blender</a>制作，使用snap方式安装：</p>
<pre><code>sudo snap install blender --classic
</code></pre>
<p>启动界面如下图1：<br><img src="https://s2.loli.net/2023/02/07/iu4QaTjUKqd1Y8N.png"></p>
<p>删除初始默认立方体后选择添加 -&gt; 网格 -&gt; 立方体，如图2所示：</p>
<p><img src="https://s2.loli.net/2023/02/07/YFNK7jAGsz9gotx.png"></p>
<p>点击界面右上角部分，调整立方体大小，如下图3、图4所示：</p>
<p><img src="https://s2.loli.net/2023/02/07/vOZdPCIFo6A8WxL.png"></p>
<p><img src="https://s2.loli.net/2023/02/07/qigf764hKF5TYCl.png"></p>
<p>设置尺寸为 x: 0.01m，y: 0.124m，z: 0.16m，设置位置z:0.08，结果如图5所示：</p>
<p><img src="https://s2.loli.net/2023/02/07/qE9X81DszQHKTJ3.png"></p>
<p>设置好尺寸后我们设置UV贴图，即贴图图片与3D立方体之间的映射关系，在此我们只贴立方体的一面作为标定板。选择界面上方的UV Editing进入UV编辑模式，如下图6所示：</p>
<p><img src="https://s2.loli.net/2023/02/07/WeV51lSqQJdnHE6.png"></p>
<p>注意，这个图左侧为立方体6个面的展开图，因此你可以看到6个正方形相连在一起的图形。右侧为立方体，通过鼠标点击此立方体周围的空白区域，可以取消选定，这时左边左边立方体的6个面展开图就会消失。通过长按鼠标左键选着立方体的一个面作为我们放置贴图的面，这时左边的立方体张开图就只有一个正方形，用鼠标左键与shift键以此点击4个定点，选中该面，结果如图7:<br><img src="https://s2.loli.net/2023/02/07/gD7FbiIGYm1wW2A.png"></p>
<p>在右边区域上方顶栏选着UV–智能UV投射：<br><img src="https://s2.loli.net/2023/02/07/vGIiJyfZqFKULgp.png"></p>
<p>直接确定即可，不需要更改什么。</p>
<p>单击右侧材质选项，点击新建，为立方体新建材质，在基础色选项中选择图像纹理，在图像图像选项中选择打开，选择本地贴图图像。</p>
<h2 id="4-模型文件编写"><a href="#4-模型文件编写" class="headerlink" title="4.模型文件编写"></a>4.模型文件编写</h2><p>新建文件夹并命名为模型名称。在该文件夹下分别新建model.config，xxx.sdf文件，meshes与materials文件夹，在meshes文件夹下放置3d模型的dae格式文件，在materials文件夹下新建textures文件夹，并将贴图图像文件放入。文件从属关系如下所示。\</p>
<pre><code>├── cat_wall.sdf
├── materials
│   └── textures
│       └── cat_wall.png
├── meshes
│   └── cat_wall.dae
└── model.config
</code></pre>
<p>此处的cat_wall即为模型名称，同时也是上诉所有文件都放置的文件夹。</p>
<p>model.config文件内容如下所示：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;model&gt;
&lt;name&gt;cat_wall&lt;/name&gt;
&lt;version&gt;1.0&lt;/version&gt;
&lt;sdf version=&#39;1.6&#39;&gt;cat_wall.sdf&lt;/sdf&gt;

&lt;author&gt;
    &lt;name&gt;kdt&lt;/name&gt;
    &lt;email&gt;kongdt@outlook.com&lt;/email&gt;
&lt;/author&gt;

&lt;description&gt;
    A plane with a reference texture on it depicting a cat.
&lt;/description&gt;
&lt;/model&gt;

最重要的，一定要修改的是sdf文件的名称，其余作者信息和模型描述可不管。
</code></pre>
<p>sdf文件如下所示：</p>
<pre><code>&lt;?xml version=&#39;1.0&#39;?&gt;
&lt;sdf version=&quot;1.6&quot;&gt;
&lt;model name=&quot;cat_wall&quot;&gt;
&lt;static&gt;true&lt;/static&gt;
    &lt;link name=&quot;link&quot;&gt;
    &lt;visual name=&quot;visual&quot;&gt;
        &lt;geometry&gt;
        &lt;mesh&gt;
            &lt;uri&gt;model://cat_wall/meshes/cat_wall.dae&lt;/uri&gt;
        &lt;/mesh&gt;
        &lt;/geometry&gt;
    &lt;/visual&gt;
    &lt;/link&gt;
&lt;/model&gt;
&lt;/sdf&gt;   
</code></pre>
<p>其中为模型名称，在gazebo中也将以该名称显示。在中填入dae模型文件地址。其中model:&#x2F;&#x2F;acircles_pattern为当前文件夹地址。</p>
<p>由此模型描述文件以全部完成，可放置在.&#x2F;gazebo&#x2F;models文件夹下，在重启gazebo后便可以在插入模型选项中找到该模型。</p>
<p>但由Blender建立的模型在gazebo中显示光泽较黯,可在文本方式下打开dae文件，找到以下选项卡，将数值由0 0 0 1改为0.5 0.5 0.5 0.5。下示为修改后内容:</p>
<pre><code>&lt;emission&gt;
    &lt;color sid=&quot;emission&quot;&gt;0.5 0.5 0.5 0.5&lt;/color&gt;
&lt;/emission&gt;
</code></pre>
<p>有些教程中，将数值全部给1，会过曝。</p>
<p>重新启动gazebo插入模型查看效果，结果如下图：</p>
<p><img src="https://s2.loli.net/2023/02/07/TW5s7mbOPgLrHtd.png"></p>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>德国Euserv免费的VPS安装Xray</title>
    <url>/posts/ed328eef/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>放假在家的时候，没有IPV6环境，想通过北邮人下载一些需要的资源，但是又不想花钱买vultr的VPS（因为我没有扶墙的需求）。所以就琢磨着白嫖，哈哈哈，白嫖使我快乐，后来就发现了Euserv这个德国的VPS。</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol>
<li>注册使用Euserv</li>
<li>ssh登录到远程主机</li>
<li>安装Xray</li>
<li>使用Qv2ray</li>
</ol>
<h2 id="注册使用Euserv"><a href="#注册使用Euserv" class="headerlink" title="注册使用Euserv"></a>注册使用Euserv</h2><ol>
<li>注册<a href="https://www.euserv.com/en/register.php">Euserv</a>,注册时，信息可以如实填写，在国内的同学账户验证可能需要2-3天。有一说一，到德国的延时是真的高，网页半天才刷出来~~</li>
<li>账户注册验证完成后，在这个界面<a href="https://www.euserv.com/en/virtual-private-server/root-vserver/v2/vs2-free.php">vs2-free</a>订购一个免费的服务。这一步也是需要审核的，耐心等待，难道这就是德国人严谨的作风，interesting~</li>
<li>再等个一天吧，审核通过。登录账户，login customer control panel。在Vserv中点击select，我们先点击reinstallation安装一个系统Debian10系统。系统装好后点击serverdata，就可以看到VPS的详细信息。包括远程登录使用的IP，root密码。<br><img src="https://i.loli.net/2021/08/08/hVRvz1ISgYLWJZ9.png"><br><img src="https://i.loli.net/2021/08/08/B8P6rSzxuMcnbjs.png"><br><img src="https://i.loli.net/2021/08/08/SsWkYDa9j2gHcBz.png"></li>
</ol>
<h2 id="ssh登录到远程主机"><a href="#ssh登录到远程主机" class="headerlink" title="ssh登录到远程主机"></a>ssh登录到远程主机</h2><p>因为我没有本地IPV6，所以只能给本地电脑添加IPV6隧道，然后再ssh连接到Euserv。如果你有本地IPV6，比如家里的宽度有，或者手机支持IPV6（国内电信联通移动这些运营商好像会提供），你可以直接远程连接。这里推荐<a href="https://mobaxterm.mobatek.net/">MobaXterm</a>这款软件，免费且界面好看。比putty和Xshell都好用。</p>
<p>本地电脑添加IPV6隧道：</p>
<ol>
<li><p>以管理员权限打开windows终端：在windows图标上右键，选择“windows终端（管理员）”</p>
</li>
<li><p>依次输入以下命令：</p>
<pre><code> netsh interface teredo set state enterpriseclient server=default
 netsh interface ipv6 reset
 netsh interface teredo set state server=teredo.remlab.net
</code></pre>
</li>
<li><p>打开MobaXterm，建立ssh连接。端口默认22，用户root，密码和ip可以在Euserv的serverdata中找到。</p>
</li>
<li><p>以后你可以通过以下命令关闭IPV6隧道（本教程中不需要执行这一条）：</p>
<pre><code> netsh interface Teredo set state disable
</code></pre>
</li>
</ol>
<h2 id="安装Xray"><a href="#安装Xray" class="headerlink" title="安装Xray"></a>安装Xray</h2><p>前提你得有一个自己的域名，没有的自己去买一个，或者找找免费的域名。然后参考这篇文章，设置一下<a href="https://zhuanlan.zhihu.com/p/82909515">cloudflare</a>。</p>
<p>在开始之前在cloudflare上增加一个新的记录，如下图所示，名称你可以自己取，内容就是Euserv上的IPV6地址，代理状态先不打开：</p>
<p><img src="https://i.loli.net/2021/08/08/q2M3X9LFlfij1em.png"></p>
<p><strong>当然，当然，</strong>如果你和我一样懒，一样的财力不雄厚，也可以不搞cloudflare,直接去<a href="https://sso.godaddy.com/account/create?realm=idp&path=/products&app=account">godaddy</a>上面注册一个域名，选最便宜的一年才8块钱，等到期了再8块钱注册一个呗，可以使用PayPal付款，paypal可以绑定银联的借记卡。注册好自己的域名之后：我的产品—网域—点击右上角的三角符号—管理DNS–点击底部的加入—增加一个AAAA记录，参考下图:</p>
<p><img src="https://i.loli.net/2021/08/09/AzuBxDEiQqP5yec.png"><br><img src="https://i.loli.net/2021/08/09/VtJNO1Lgbahv8s4.png"></p>
<p>然后我们接着往下走，这一部分我参考的<a href="https://trojanv2ray.blogspot.com/2020/12/VPSEuservXray.html">这篇文章</a>。</p>
<ol>
<li><p>VPS设置IPV4访问。因为我们订购的那个免费主机是纯IPV6地址的，为了能访问Github下载文件，所以要设置VPS能访问IPV4地址。输入以下命令：</p>
<pre><code> echo -e &quot;nameserver 2001:67c:2b0::4•\nnameserver 2001:67c:2b0::6&quot; &gt; /etc/resolv.conf
</code></pre>
</li>
<li><p>安装curl:</p>
<pre><code> apt-get update -y &amp;&amp; apt-get install curl -y
</code></pre>
</li>
<li><p>Xray一键安装代码:</p>
<pre><code> bash &lt;(curl -sL https://s.hijk.art/xray.sh)
</code></pre>
</li>
</ol>
<p>Cloudflare的CDN，目前只能使用websocket协议，XTLS不支持websocket协议,所以我们选择7,VLESS+WS+TLS这一个选项。<br><img src="https://i.loli.net/2021/08/08/W31hYbA72FgzqfM.png"><br>安装的过程中<strong>BBR加速选项选择no</strong>，<strong>BBR加速选项选择no</strong>，<strong>BBR加速选项选择no</strong>，其余的可以都是默认。</p>
<p>安装到最后会报错，证书没获取。没关系，我们输入以下命令获取证书：</p>
<pre><code>    bash /root/.acme.sh/acme.sh --issue -d 域名 --debug --standalone --keylength ec-256 --listen-v6  
</code></pre>
<p><strong>记得把“域名”这两个字换成自己的域名</strong>。</p>
<p>如果到最后能看到 your cert is in 某某路径，说明安装成功了，然后再次运行刚才的一键安装脚本，重新安装一遍。</p>
<p>如果证书没有安装成功，试试下面的代码：</p>
<pre><code>    apt-get install openssl cron socat curl   
    apt-get -y install netcat   
</code></pre>
<p>安装成功后执行 source ~&#x2F;.bashrc 以确保脚本所设置的命令别名生效。然后再运行获取证书的命令，如果成功，就运行Xray一键安装代码。</p>
<p>我在安装证书的时候遇到了“tcp port 80 is alread used in nginx…”的错误，提示我先先关闭nginx。我使用下面的命令关闭：</p>
<pre><code>    nginx -s quit  #此方式停止步骤是待nginx进程处理任务完毕进行停止
</code></pre>
<p>还有一些其他的命令放在这里(你不用输入的亲，我留着给自己以后参考）:</p>
<pre><code>    1.start nginx  //启动nginx的命令。
    2.nginx -s quit  //此方式停止步骤是待nginx进程处理任务完毕进行停止。
    3.nginx -s stop  //此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。
    4.nginx -s reload  //重新加载配置文件：当 nginx的配置文件 nginx.conf 修改后，要想让配置生效需要重启 nginx，使用-s reload不用先停止 nginx再启动 nginx 即可将配置信息在 nginx 中生效
</code></pre>
<p>4.Xray安装成功后，可以看到配置信息。</p>
<h2 id="使用Qv2ray"><a href="#使用Qv2ray" class="headerlink" title="使用Qv2ray"></a>使用Qv2ray</h2><p>把我截图中的红框里的内容换成自己的，就OK了。</p>
<p>主机和TLS下“服务器地址（SNI)”填写自己的域名。</p>
<p>需要特别说明的一个就是请求头那里是 Host|你的域名。其他的就是正常使用Qv2ray的方法。</p>
<p><img src="https://i.loli.net/2021/08/08/ryMPJ1Y7xDTUwO9.png"><br><img src="https://i.loli.net/2021/08/08/ldGCFqkUQyKi3En.png"></p>
<p>打开代理，看看自己是不是能上网了。如果不能，回到cloudflare里，把我们刚刚增加的那个记录的代理打开。也就是点击小云朵，让他变黄色~~~</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>本文属于自己参考多篇教程梳理总结的内容，建议配合<a href="https://www.youtube.com/watch?v=cfoh2j4fZcM">这个Youtube视频</a>一起食用。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>vps</tag>
        <tag>记录</tag>
        <tag>Xray</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建记录</title>
    <url>/posts/ee940876/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很早就有搭建博客记录生活的想法了，以前看过有人使用WordPress搭建，但是自己尝试了一遍没有成功，所以就一直搁置至今。</p>
<p>最近偶然间看到了有人使用GitHub+Hexo搭建博客，更加的方便易管理，而且自己已经有一个域名了。所以说干就干，下面是整个过程的记录。</p>
<h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><ol>
<li>注册GitHub，并新建一个仓库</li>
<li>安装git</li>
<li>安装Node.js</li>
<li>安装Hexo</li>
<li>发布第一篇博文</li>
<li>注册域名，并在GitHub上绑定个性化域名</li>
<li>安装网站美化主题</li>
<li>hexo指令简介</li>
</ol>
<h2 id="注册GitHub，并新建一个仓库"><a href="#注册GitHub，并新建一个仓库" class="headerlink" title="注册GitHub，并新建一个仓库"></a>注册GitHub，并新建一个仓库</h2><p> <a href="https://github.com/">GitHub</a>是全球最大的开源社区，在这里你能认识很多有趣的人，并从大佬那里学习很多知识。注册完成后点击屏幕右上角的“+”，然后点击New repository新建一个仓库，仓库的名称为：用户名.github.io，用户名就是你注册时给自己取的名字。Descritopns那里可以填写my personal website，或者其他任何你自己想写的内容。然后保持其他选项默认，点击底部的绿色按钮Create repository即可。<br><img src="https://i.loli.net/2021/07/27/v8oBsiDPux4yGf2.png"></p>
<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>从<a href="https://git-scm.com/download/win">git</a>官网下载对应的版本安装。有时间可以看看<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰</a>老师的git详细教程。这里我们暂时不需要学习很多指令，先把网站搭起来再慢慢学习。</p>
<p>在电脑硬盘里新建一个名为Hexo的文件夹，你可以放在任何你想放的位置。进入我们刚建立的空文件夹，鼠标右键，选择git bash here。<br><img src="https://i.loli.net/2021/07/27/i5wYpmKHF41rgfD.png"></p>
<p>然后输入以下指令</p>
<pre><code>git config --global user.name &quot;GitHub用户名&quot;  #记得替换双引号中的内容
git config --global user.email &quot;GitHub注册邮箱&quot;
</code></pre>
<p>接着生成ssh秘钥，这样GitHub就能够认识我们的电脑，方便以后的操作。</p>
<pre><code>ssh-keygen -t rsa -C &quot;GitHub注册邮箱&quot;  #记得替换双引号中的内容
</code></pre>
<p>操作过程中一路回车即可。</p>
<p>按照下图中的路径找到id_rsa.pub这个文件，用记事本打开，然后全选复制内容。打开github的<a href="https://github.com/settings/keys">setting keys界面</a>，点击绿色的new SSH key按钮，将刚才复制的内容粘贴到key的框中，title一栏可以随意填写，不过我建议你填写正在使用的电脑名称，方便我们知道这是那台设备的ssh key。最后点击下方的 add ssh key即可。</p>
<p><img src="https://i.loli.net/2021/07/27/9rjqGPLkCbUmouW.png"></p>
<p>接着我们输入以下指令来验证是否成功添加了SSH:</p>
<pre><code>ssh git@github.com
</code></pre>
<p>如果出现以下截图，说明成功：<br><img src="https://i.loli.net/2021/07/27/FcAXR2Uy8edh7nr.png"></p>
<p>第一次设置的时候可能并不会直接出现这个界面，会有一段较长的文字显示，但是最后的文字是一样的，当时设置时忘记截图了。</p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p><a href="https://nodejs.org/en/download/">Node.js下载网站</a></p>
<p>从上面的网站下载对应的版本，执行安装即可。windows版本下载的.msi软件包和.exe程序一样，直接双击就能安装。没什么好说的，一路下一步，印象里安装前的最后一步问你是否勾选“自动安装依赖”之类的，我勾选了。</p>
<p>测试是否安装成功，打开命令行界面，输入：</p>
<pre><code>node -v
</code></pre>
<p>如果输出了版本号，说明安装成功。</p>
<p>我们在安装node.js时，也会同时安装npm，类似的，在命令行输入：</p>
<pre><code>npm -v
</code></pre>
<p>如果输出版本号，则安装成功。</p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>进入刚刚我们建立的Hexo文件夹内，按住shift键的同时点击鼠标右键，选择<strong>“在windows终端打开”</strong>，此步操作的目的是在你建立的博客文件夹目录下执行操作。</p>
<p>执行以下命令安装hexo：</p>
<pre><code>npm install -g hexo-cli 
</code></pre>
<p>耐心等待安装完成，印象中会在某个地方停顿好久，可以按一下回车键或者空格键，一定要等到程序完全安装结束。接着初始化博客：</p>
<pre><code>hexo init blog
</code></pre>
<h2 id="发布第一篇博文"><a href="#发布第一篇博文" class="headerlink" title="发布第一篇博文"></a>发布第一篇博文</h2><p>下面就是激动人心的时刻了，发布我们的第一篇博文，跟着命令来吧：</p>
<pre><code>hexo new my first bolg
hexo g
hexo s
</code></pre>
<p>完成这些操作后，复制以下地址到浏览器地址栏：</p>
<pre><code>localhost:4000
</code></pre>
<p>就看到我们在博客中添加了一条标题为 my first blog的内容啦。同时在本地hexo&#x2F;source&#x2F;_posts目录下看到一个my first blog.md的文件。这个就是我们博客的内容了，可以通过Markdown编辑软件打开，编辑我们想要发布的内容。我使用的是<a href="http://markdownpad.com/">MarkdownPad2</a>，关于Markdown的语法，你可以参考这个<a href="https://www.appinn.com/markdown/">十分钟学会Markdown</a>。</p>
<p>注意，这里只是本地预览，我们还需要一些操作将hexo生成的网页真正的发布到互联网上，这里我们是借助github来实现。</p>
<p>在hexo文件夹下找到_config.yml，如下图所示，用文本编辑软件打开。这里安利一下<a href="https://code.visualstudio.com/">vs code</a>，微软良心产品，各平台通用，不仅能编程，做个文本编辑器也是好用的。如果你实在不想安装软件，好吧，右键，选择用记事本打开。</p>
<p><img src="https://i.loli.net/2021/07/27/WQ1BUgvT7a3cGsI.png"></p>
<p>找到下面代码的部分，将repo那部分改成自己的地址：</p>
<pre><code>deploy:
      type: git
      repo: https://github.com/你的ID/你的ID.github.io.git
      branch: master
</code></pre>
<p>养成良好习惯，随手保存，Ctrl+S保平安。</p>
<p>接着安装git部署插件：</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre>
<p>现在我们的博客已经和github建立了联系，而且可以方便的使用git将内容上传到github的仓库里了。</p>
<p>下面就让我们来验证一下吧，跟着下面的命令走：</p>
<pre><code>hexo clean
hexo g
hexo d
</code></pre>
<p>网站现在已经成功的部署到互联网上啦，下面我们来访问这个网站：</p>
<pre><code>你的ID.github.io
</code></pre>
<p>如果不出意外的话，现在你的博客已经成功上线啦！</p>
<h2 id="安装网站美化主题"><a href="#安装网站美化主题" class="headerlink" title="安装网站美化主题"></a>安装网站美化主题</h2><p>默认的博客界面较为简陋，但是开放的互联网为我们提供了各式各样的美化主题，你可以访问<a href="https://hexo.io/themes/">hexo官方主题网站</a>寻找自己喜欢的样式。</p>
<p>我使用的NexT主题，你完全可以按照<a href="https://theme-next.js.org/docs/getting-started/">官方说明文档getting-started</a>来一步步安装，使用，个性化这个主题，当然也可以参照这里的中文记录。</p>
<p>在正式的操作开始前，先介绍两个概念，这对接下来的操作很重要：</p>
<p><strong>Hexo使用的主要配置文件有两个，都叫做_config.yml</strong></p>
<ol>
<li>第一个是在站点根目录下，其中包含Hexo的配置。</li>
<li>第二个是在主题根目录下，它由NexT提供，包含了主题的配置。</li>
</ol>
<p>我们称第一个文件为<strong>网站配置文件</strong>，第二个文件为<strong>主题配置文件</strong>。</p>
<p>好的，概念介绍完毕，继续我们的操作。</p>
<p>在hexo目录中打开命令行（我们已经对这个操作很熟悉了，实际上本篇博客的所有操作都是在这个目录中进行的），然后输入以下指令：</p>
<pre><code>git clone https://github.com/next-theme/hexo-theme-next themes/next
</code></pre>
<p>打开网站配置文件，将主题设定为next</p>
<p><img src="https://i.loli.net/2021/07/27/aSgh1df38biv4Nu.png"></p>
<p>现在我们已经成功的安装并且开启了nex主题，那就来检验一下吧：</p>
<pre><code>hexo clean
hexo g
hexo s
</code></pre>
<p>在本地浏览器地址栏输入：</p>
<pre><code>localhost:4000
</code></pre>
<p>可以看到我们的网站已经换了一个主题，好看多了。</p>
<p>你还可以打开主题配置文件，选择next主题提供的不同样式：</p>
<p><img src="https://i.loli.net/2021/07/27/yeG6FIUQznsWfuh.png"></p>
<p>还有更多的网站个性化设置，善用搜索，也许以后我也会慢慢更新。</p>
<h2 id="个性化域名"><a href="#个性化域名" class="headerlink" title="个性化域名"></a>个性化域名</h2><p>这个步骤并不是非做不可，但是对于那些想要彰显个性的同学，我们可以设置属于自己的个性化域名。</p>
<p>首先，你需要有一个属于自己的域名，国内可以去<a href="https://www.alibabacloud.com/zh/domain?utm_key=se_1006854129&utm_content=se_1006854129&gclid=Cj0KCQjw3f6HBhDHARIsAD_i3D8ivJ6aXXy9IXNUr0l1EoWpV5vrNNHlA1ogFasGGEvd7ecMGF_kDHUaAuFBEALw_wcB">阿里云域名</a>注册一个自己喜欢的自定义域名，选便宜的买就行，土豪随意。我是在国外的<a href="https://hk.godaddy.com/offers/godaddy?isc=gofhlhk02&countryview=1&currencyType=HKD&gclid=Cj0KCQjw3f6HBhDHARIsAD_i3D9myp_cB1Bq_PqnheVnwliYTwt-v8_2LQGzfYYIwYi5k8lBY1rCjzMaApD6EALw_wcB&gclsrc=aw.ds">godaddy</a>上购买的域名，接下来的设置展示也是以godaddy为例。</p>
<p>在域名提供商的DNS管理界面，增加4条A记录，记录名称@，值为4个IP地址，你也可以参考github的官方文档<a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">Configuring an apex domain</a>来查找这4个IP地址：</p>
<pre><code>185.199.108.153
185.199.109.153
185.199.110.153
185.199.111.153
</code></pre>
<p>设置好之后的界面类似下面这样：</p>
<p><img src="https://i.loli.net/2021/07/27/3LOBN59tRThAybl.png"></p>
<p>接着添加一条CNAME记录，名称为:www，值为:你的id.github.io。</p>
<p><img src="https://i.loli.net/2021/07/27/i3HjSoe8aRBZGsn.png"></p>
<p>然后登录GitHub，进入刚建立的仓库，点击settings，点击左边列表中选择pages，设置Custom domain，输入你的个性化域名，如下图所示：</p>
<p><img src="https://i.loli.net/2021/07/27/PIOiw2rLA1m6xUf.png"></p>
<p>最后一步，在本地的hexo&#x2F;source文件目录下，新建一个名称为CNAME文件，里面输入你的个性化域名，并将文件保存为所有文件类型。<strong>注意不是保存为txt，是保存为所有文件类型。</strong></p>
<p><img src="https://i.loli.net/2021/07/27/jnu48GlADyBLPRz.png"></p>
<p>好的，大功告成，现在让我们来验证一下吧，依次输入一下命令：</p>
<pre><code>hexo clean
hexo g
hexo d
</code></pre>
<p>这时候在浏览器地址栏输入自己的个性化域名即可开心的浏览自己的博客啦。</p>
<h2 id="hexo指令简介"><a href="#hexo指令简介" class="headerlink" title="hexo指令简介"></a>hexo指令简介</h2><p>命令简写</p>
<p>hexo n “blog” #新建文章</p>
<p>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p>
<p>hexo g #生成</p>
<p>hexo s #启动服务预览</p>
<p>hexo d #部署</p>
<p>hexo3连：</p>
<pre><code>hexo clean
hexo g
hexo d
</code></pre>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>想搭建一个个人博客很快，半天时间就足够了。但是如果你想要它好看，符合自己的需求，还是需要花点功夫慢慢的拾到。不过最重要的一点不要忘记，我们建立博客的初衷是分享自己的内容，这才是最重要的。</p>
]]></content>
      <categories>
        <category>网站</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>网站</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>HEXO blog Error ENOENT no such file or directory</title>
    <url>/posts/cb1473a2/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>新电脑重新部署博客时，出现以下报错</p>
<p><img src="https://s2.loli.net/2023/09/14/5DO6XURxpyCHlNd.png"></p>
<h2 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h2><p>从错误提示中，我们可以看到，是因为缺少tomorrow-night.css这个文件</p>
<p>但是如果我们只新建这一个文件，还会出现如下报错：</p>
<p><img src="https://s2.loli.net/2023/09/14/DbSHdjhBsIyZT16.png"></p>
<p>并且这个时候博客的排版格式也会变得混乱，图片无法加载显示</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>这是因为文件版本冲突造成的，直接用原来可以用的文件覆盖现在的文件即可，具体来说就是把 <a href="https://github.com/kdt2014/highlight.js/tree/main/styles">https://github.com/kdt2014/highlight.js/tree/main/styles</a> styles文件夹直接全部替换原来&#x2F;home&#x2F;kdt&#x2F;Documents&#x2F;kdt2014.github.io&#x2F;node_modules&#x2F;highlight.js&#x2F;styles的文件夹</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在IPV4网络环境中使用IPV6网络</title>
    <url>/posts/26532de6/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很多校园网pt用户在毕业后没有了IPV6网络，就再也无法顺畅的访问便利的资源站了。即使家里有运营商提供的IPV6地址，但是pt站ban了国内的V6 IP，同样没法正常访问。幸运的是，目前国外的IPV6地址可以使用。下面将介绍如何在只有IPV4网络的情况下访问IPV6网站。</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li>注册IPV6服务器代理商</li>
<li>建立网络服务</li>
<li>本地网络代理设置</li>
</ul>
<h2 id="注册IPV6服务器代理商"><a href="#注册IPV6服务器代理商" class="headerlink" title="注册IPV6服务器代理商"></a>注册IPV6服务器代理商</h2><p>这一步理论上你可以使用任何一家的服务，只要他们提供IPV6 地址，我使用的是<a href="https://www.vultr.com/?ref=9050063-8H">vultr</a>，使用前面那个链接注册新用户，并首次充值10美元，可以得到100美元额外奖励用于<strong>首月</strong>的测试，之后就需要你自己付费了，相当于免费用一个月。我选择的是最便宜的一个月6刀的服务，每个月1T流量，几个人合伙使用，妥妥的够用，甚至一半都用不了。<br>按照下图步骤开一个新的实例，一定记得勾选 Enable IPV6：</p>
<p><img src="https://s2.loli.net/2022/02/08/YNl97eXfcOBGkHj.png"><br><img src="https://s2.loli.net/2022/02/08/MCukRh9SKjFf4sb.png"><br><img src="https://s2.loli.net/2022/02/08/S6zRvl1EoAGqej9.png"><br><img src="https://s2.loli.net/2022/02/08/h7iQL4nOvSM6f9d.png"></p>
<p>然后稍等一两分钟，就可以看到新部署的实例了。</p>
<p>点击一下实例，就能够看到详情了，下图是我新开实例的信息，最重要的三点信息，IP, username，password，这些信息在我们远程连接服务器的过程中需要使用。</p>
<p><img src="https://s2.loli.net/2022/02/08/IvYqsiyDQMVzjap.png"></p>
<p><strong>友情提示：</strong>图中我选择的是东京的机房，实践告诉我，该机房很多ip已经被ban了，你需要来<a href="https://port.ping.pe/">port.ping.pe</a>测试，输入的格式为ip:443，例如 45.12.113.12:443。<br>如果全部地区尤其是中国地区能ping通，那么就保留并使用这个ip，如果ping不通，那就再开一个实例，重复以上动作，直到找到一个能用的IP，然后再删除之前不能用的实例。另外，也可以试一试美国的机房，东京，洛杉矶和新加坡机房的ip被ban的比较多。</p>
<p>如果你发现ip不能用，删除实例，再申请，你会发现系统给你分配的ip还是刚才那个。当然你可以根据自己的网络状况，选择其他地区的机房，记得在<a href="https://ping.pe/">ping.pe</a>上测试一下延时丢包。</p>
<h2 id="建立网络服务"><a href="#建立网络服务" class="headerlink" title="建立网络服务"></a>建立网络服务</h2><ul>
<li><p>使用<a href="https://mobaxterm.mobatek.net/">MobaXterm</a>作为远程 ssh登录工具，良心免费软件，强烈推荐。</p>
</li>
<li><p>按照以下步骤输入 IPV4 地址，并且点击OK<br><img src="https://s2.loli.net/2022/02/08/dtQEihBKo4YeRrM.png"></p>
</li>
<li><p>在新的界面，login的用户名 root，回车，密码直接在网站上复制，然后回到mobaxterm的界面右键，自己选择一种操作模式，将密码复制进去，回车。<br><img src="https://s2.loli.net/2022/02/08/lxyJ9oMGh2snwPk.png"></p>
</li>
<li><p>看到这个界面，我们就成功的连接到了远程服务器<br><img src="https://s2.loli.net/2022/02/08/5Q4GqULpfwsMx1E.png"></p>
</li>
<li><p>服务器部署<br>这一步你可以参考<a href="https://www.jamesdailylife.com/v2ray-vless-tcp-xtls">我是教程</a>了解更详细的信息。先执行以下命令：<br>apt install wget curl -y</p>
</li>
</ul>
<p>然后再执行：<br>      wget -P &#x2F;root -N –no-check-certificate “<a href="https://raw.githubusercontent.com/mack-a/v2ray-agent/master/install.sh">https://raw.githubusercontent.com/mack-a/v2ray-agent/master/install.sh</a>“ &amp;&amp; chmod 700 &#x2F;root&#x2F;install.sh &amp;&amp; &#x2F;root&#x2F;install.sh<br><img src="https://s2.loli.net/2022/02/09/5LerG1s7UXZdNaS.png"><br>按以下顺序选择执行命令：</p>
<ul>
<li>2.任意组合安装</li>
<li>1.Xray-core</li>
<li>0.VLESS+TLS&#x2F;XTLS+TCP</li>
<li>输入一个你的域名，<a href="https://www.gongsunqi.xyz/2022/02/09/%E5%A6%82%E4%BD%95%E5%9C%A8godaddy%E4%B8%8A%E6%B3%A8%E5%86%8C%E5%B9%B6%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E5%9F%9F%E5%90%8D/">如何在godaddy上注册并使用一个域名</a></li>
<li>UUID，这一步直接回车，会自动生成的</li>
<li>然后系统就会自动安装，直到你看到下图<br><img src="https://s2.loli.net/2022/02/09/QvkwNUfCYqKEH6G.png"></li>
</ul>
<p>这里就是我们服务器的配置信息了，通用格式下面那几行 vless开头的一长串信息就是配置链接，下面需要用到。<strong>请复制并保存起来！</strong></p>
<p>需要注意的是，你需要一个域名，我的是在<a href="https://hk.godaddy.com/offers/godaddy?isc=gofhlbhk06&countryview=1&currencyType=HKD&cdtl=c_31722013.g_2972073157.k_kwd-30997737601:loc-200.a_.d_c&msclkid=2d3287737b29148cb308e57100c03be0&utm_source=bing&utm_medium=cpc&utm_campaign=zh-hk_corp-core_sem_bh_b_x_new_x_pros_intl_x_001&utm_term=godaddy&utm_content=GD%20Corp%20Core">狗爹</a>注册的，找个最便宜的就行，一年也就几块钱，或者你自己搜索找一些免费的域名。</p>
<h2 id="本地网络代理设置"><a href="#本地网络代理设置" class="headerlink" title="本地网络代理设置"></a>本地网络代理设置</h2><ul>
<li>代理客户端<br>你可以使用<a href="https://github.com/2dust/v2rayN/releases">V2rayN</a>,下载最新版本，这里我们只需下载V2rayN<br><img src="https://s2.loli.net/2022/02/08/mjC6zKedVNHO3SA.png"></li>
</ul>
<p>然后打开软件，点击检查更新，Xray-core。这时候软件会自动下载一些东西。<br>等待自动下载完毕，点击设置–v2rayN设置-Core类型-Xray-core。<br><img src="https://s2.loli.net/2022/02/08/JBlzZDvyL4uw1gU.png"></p>
<p>然后导入刚刚“服务器部署”那一步得到的配置链接，先复制一下链接，然后导入<br><img src="https://s2.loli.net/2022/02/08/w8PS97D6lvicHIE.png"><br>然后就能看到类似的配置出现在软件界面<br><img src="https://s2.loli.net/2022/02/08/xvVoUOYqGIKwDl9.png"></p>
<p>然后在系统右下角找到软件，并右键–路由–全局；系统代理–自动配置系统代理；<br><img src="https://s2.loli.net/2022/02/09/3oOWzh5ydDQEslq.png"></p>
<p>到这里，代理客户端我们就配置好了。<br>这时候，打开浏览器，<a href="http://test-ipv6.com/">测试一下IPV6</a>,一切顺利的话，会看到下图中的内容。<br><img src="https://s2.loli.net/2022/02/09/qG7NCXF8tZlmwKU.png"></p>
<ul>
<li>utorrent 设置<br>参照下图</li>
</ul>
<p><img src="https://s2.loli.net/2022/02/09/sGulEeCWLF76X9n.png"></p>
<p>这个时候我们就可以按照正常的流程下载使用pt了。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客URL中文乱码解决办法</title>
    <url>/posts/6cf92cc/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Hexo博客默认的URL生成方式是year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;，如果我们的标题中包含中文，那么URL就会出现乱码，并且如果更改标题，URL就会变动。这对使用URL分享文章非常不友好。因此，通过设置安装hexo-abbrlink插件的方式来固定标题，消除中文乱码。</p>
<h2 id="安装hexo-abbrlink插件"><a href="#安装hexo-abbrlink插件" class="headerlink" title="安装hexo-abbrlink插件"></a>安装hexo-abbrlink插件</h2><p>在博客的根目录下，使用以下命令安装：</p>
<pre><code>npm install hexo-abbrlink --save
</code></pre>
<h2 id="修改-config-yml文件"><a href="#修改-config-yml文件" class="headerlink" title="修改_config.yml文件"></a>修改_config.yml文件</h2><pre><code>permalink: posts/:abbrlink/ 
# abbrlink config
abbrlink:
alg: crc32      #support crc16(default) and crc32
rep: hex        #support dec(default) and hex
</code></pre>
<p>修改完成之后，执行：</p>
<pre><code>hexo clean 
hexo g -d
</code></pre>
<p>这样以前和之后生成的文章就会根据文章生成的时间戳自动产生标题。</p>
]]></content>
      <categories>
        <category>网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title>让自己通过Hexo建立的博客被谷歌搜索到</title>
    <url>/posts/c54addba/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一般我们建立博客的目的就是分享一些东西，那么如何让我们的博客被更多的人看到呢？那当然是被搜索引擎收录后，能够被更多的人用关键词检索到。</p>
<p>本文介绍如何让自己的博客被谷歌搜索引擎搜索到，如需知道如何被百度检索请参考<a href="https://blog.csdn.net/sunshine940326/article/details/70936988/">这篇文章</a></p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li>本地配置</li>
<li>谷歌搜索配置</li>
</ul>
<h2 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h2><p>在博客安装根目录，也就是你平时运行 hexo g等命令的那一层目录，执行以下代码：</p>
<pre><code>npm install hexo-generator-sitemap --save
</code></pre>
<p>安装完成后，在.deploy.git文件夹下能发现多了一个sitemap.xml的文件，以后我们每次运行hexo g这个命令时就会生成（更新）这个文件。</p>
<p>打开博客的配置文件（博客安装根目录下）_config.yml，找到以下内容，并将URL更改为自己的网站地址。</p>
<p><img src="https://i.loli.net/2021/08/14/ZmsoERqd1va8O7K.png"></p>
<h2 id="谷歌搜索配置"><a href="#谷歌搜索配置" class="headerlink" title="谷歌搜索配置"></a>谷歌搜索配置</h2><p>首先打开<a href="https://search.google.com/search-console">谷歌搜索配置网站</a>，如果你没有谷歌账户，没关系注册一个。</p>
<p>点击左上角的三角箭头，然后添加资源，如下图所示：</p>
<p><img src="https://i.loli.net/2021/08/14/zmE2BfK5DcC3JWP.png"></p>
<p>然后在下图中的位置填写你的网址，然后点击继续：</p>
<p><img src="https://i.loli.net/2021/08/14/DNXbJk2P67YEVgh.png"></p>
<p>在弹出以下界面后，点击“前往资源界面”。</p>
<p><img src="https://i.loli.net/2021/08/14/F7i2wcDLsATgUPr.png"></p>
<p>接下来的部分当时布置时我没有截图，只能凭记忆用语言描述以下，很简单的几步操作。</p>
<p>这时的谷歌界面应该是告诉你去DNS服务商那里添加一条TXT记录，然后给了你一串可以复制的代码。</p>
<p>这时打开你购买网址的服务商网站，在DNS解析那里添加一条TXT记录，然后将谷歌提供的内容粘贴进去，保存即可。如下图展示的是在cloudflare中添加TXT记录。</p>
<p><img src="https://i.loli.net/2021/08/14/DbxK73CPE4qGtUw.png"></p>
<p>之后在谷歌搜索的console界面就能就能看到我们的网址，然后点击站点地图，添加你自己的网址：<a href="https://yoursite/sitemap">https://yoursite/sitemap</a></p>
<p><img src="https://i.loli.net/2021/08/14/KDyd6srqfuXw5Vk.png"></p>
<p>然后就能看到谷歌提示，成功添加。如果你在执行这一步之前没有在配置文件_config.yml中修改url并在修改后执行 hexo g，hexo d，谷歌会报错的。这时你要删掉刚刚添加的站台地图网址，在完成以上动作后，重新添加就不会有报错了。</p>
<p>然后等待谷歌更新，就能收录你的博客内容了。需要一些时间（maybe 几十分钟，maybe更长）。</p>
]]></content>
      <categories>
        <category>网站</category>
      </categories>
      <tags>
        <tag>网站</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>将HEXO博客迁移到一台新的电脑</title>
    <url>/posts/d0b820b4/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在一台电脑上部署好了自己的博客，但是我们有时候会需要在其他电脑上更新，比如我在实验室的台式机和自己的笔记本上都有更新博客的需求。<br>这篇内容将帮助我们解决这个需求！</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li>创建新的分支</li>
<li>新电脑上使用hexo</li>
<li>重要提示</li>
</ul>
<h2 id="创建新的分支"><a href="#创建新的分支" class="headerlink" title="创建新的分支"></a>创建新的分支</h2><p>首先创建一个hexo分支，如图所示<br><img src="https://s2.loli.net/2022/01/26/Aewlq74MVgtPbo6.png"></p>
<p>然后在setting中将hexo设置为默认分支，这样以后的数据就会同步到这个分支中<br><img src="https://s2.loli.net/2022/01/26/LDWwNoQInAe9t61.png"></p>
<p>接下来我们在本地任意目录下，将刚才这个分支clone下来<br>使用git bash打开，输入以下命令：<br>  git clone <a href="mailto:&#103;&#105;&#x74;&#x40;&#103;&#x69;&#116;&#104;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d;">&#103;&#105;&#x74;&#x40;&#103;&#x69;&#116;&#104;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d;</a>:xxxx&#x2F;xxxx.github.io.git  记得换成自己的地址</p>
<p>将克隆下来的文件除了.git文件夹之外的所有文件都删除。电脑开启显示隐藏文件就能看到.git.</p>
<p>将之前写的博客源文件全部否复制过来，除了.deploy_git。</p>
<p>需要注意的是，复制过来的文件需要有一个名为.gitignore的文件，如果没有的话，自建一个，里面的内容填写下面所示：</p>
<pre><code>.DS_Store
Thumbs.db
db.json
*.log
node_modules/
public/
.deploy*/
</code></pre>
<p>如果你之前clone过theme中的主题文件，也要把主题中的.git删除。因为git是不能嵌套上传的！</p>
<p>之后分别执行以下命令：</p>
<pre><code>git add .
git commit –m &quot;add branch&quot;
git push 
</code></pre>
<p>这样我们就把本地的文件上传到GitHub了。</p>
<h2 id="新电脑上使用hexo"><a href="#新电脑上使用hexo" class="headerlink" title="新电脑上使用hexo"></a>新电脑上使用hexo</h2><ul>
<li><p>安装git，参考上一篇教程 <a href="https://www.gongsunqi.xyz/posts/ee940876/#%E5%AE%89%E8%A3%85git">安装git</a>，对于Ubuntu等Linux系统，Git默认安装了。</p>
</li>
<li><p>安装Node.js，Windows系统参考<a href="https://www.gongsunqi.xyz/posts/ee940876/#%E5%AE%89%E8%A3%85Node-js">安装Node.js</a>，Ubuntu系统参考<a href="https://www.gongsunqi.xyz/posts/7a25054b/">Ubuntu安装指定版本的Nodejs</a>。</p>
</li>
<li><p>安装Hexo，这里我们<strong>不需要初始化了</strong>，参考<a href="https://www.gongsunqi.xyz/posts/ee940876/#%E5%AE%89%E8%A3%85Hexo">安装Hexo</a></p>
</li>
<li><p>同步到本地<br>在任意自己喜欢的文件夹下面执行：</p>
<pre><code>  git clone git@………………
</code></pre>
</li>
<li><p>然后进入到同步下来的文件夹内：</p>
<pre><code>  cd xxx.github.io
  npm install
  npm install hexo-deployer-git --save
</code></pre>
</li>
<li><p>生成部署</p>
<pre><code>hexo g
hexo d
</code></pre>
</li>
</ul>
<p>这样我们就在新电脑上设置完成了！</p>
<h2 id="重要提示"><a href="#重要提示" class="headerlink" title="重要提示"></a>重要提示</h2><p>以后每次写完博客，一定要把源文件同步到GitHub上：</p>
<pre><code>git add .
git commit –m &quot;xxxx&quot;
git push 
</code></pre>
<p>每次开始写新的博客之前，执行一下：</p>
<pre><code>git pull
</code></pre>
<p>声明：本篇教程参考<a href="https://www.zhihu.com/question/21193762">知乎</a></p>
]]></content>
      <categories>
        <category>网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title>Qv2ray使用手册</title>
    <url>/posts/6ad3d66d/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Qv2ray是一个很好用的代理软件工具，界面美观，操作便捷。但是对于小白来说，第一次使用它的时候会遇到一些障碍，因此写了这篇文章用来介绍使用步骤。</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol>
<li>Qv2ray的下载与安装</li>
<li>内核的选择</li>
<li>增加你的配置</li>
</ol>
<h2 id="Qv2ray的下载与安装"><a href="#Qv2ray的下载与安装" class="headerlink" title="Qv2ray的下载与安装"></a>Qv2ray的下载与安装</h2><p>很不幸的是，就在我写这篇文章的时候（2021.8.17），去GitHub上看了一眼，该软件因为开发者内部矛盾，永久停更了（最后更新日期2021.8.17），版本停留在了2.7.0。不过你仍然可以访问他们的<a href="https://github.com/Qv2ray/Qv2ray/releases">GitHub网站</a>下载自己需要的版本。为了以防万一，我下载了最后的版本，上传到百度云，你也可以通过百度云下载链接：<a href="https://pan.baidu.com/s/1WN19u_nsxwNBP_vrbwH6cw">https://pan.baidu.com/s/1WN19u_nsxwNBP_vrbwH6cw</a> ，提取码：4scj</p>
<p>以Windows平台为例，下载.exe程序，然后安装，你可以选择自己喜欢的位置，或者像我一样，一路下一步。</p>
<h2 id="内核的选择"><a href="#内核的选择" class="headerlink" title="内核的选择"></a>内核的选择</h2><p>如果你使用的是Project X下的v2ray-core，去<a href="https://github.com/v2ray/v2ray-core/releases">这个网址</a> 下载对应系统版本的内核。</p>
<p>如果你使用的是Project X下的Xray-core, 那么首先你要做的就是去<a href="https://github.com/XTLS/Xray-core/releases/tag/v1.4.2">XTLS的GitHub网站</a>下载最新的内核。</p>
<p>Xray-core完全兼容v2ray-core，所以为了更好的协议兼容性，强烈建议你更换为Xray-core。</p>
<p>还是以windows平台位例，下载下图中Xray-windows-64.zip文件夹（如果你是32位系统请下载32位的版本），然后放到任何一个你喜欢的位置，解压得到一个新的文件夹Xray-windows-64。</p>
<p><img src="https://i.loli.net/2021/08/17/ISizLFW587joXna.png"></p>
<p>下面打开刚刚安装好的Qv2ray软件，然后参照下图进行内核的选择与替换，路径中出现的Xray-windows-64就是你刚刚解压得到的新文件夹。<br><img src="https://i.loli.net/2021/08/17/O3lA5sRbacUP9X1.png"></p>
<h2 id="增加你的配置"><a href="#增加你的配置" class="headerlink" title="增加你的配置"></a>增加你的配置</h2><p>前两步完成后，就不需要变动了，以后使用我们只需要简单的增加配置文件即可。</p>
<p>将你的配置链接直接黏贴到相应的框框里，然后点击确定，就完成了配置的导入，具体步骤见下图。</p>
<p><img src="https://i.loli.net/2021/08/17/ul4MAL1ti2mzGDs.png"></p>
<p>导入成功之后，在软件界面的左边就能看到你的服务了，直接双击该服务，就可以启动，当然你也可以点击软件界面上的三角符号来启动该服务，参见下图。</p>
<p><img src="https://i.loli.net/2021/08/17/8nlmAyoXNzORFCw.png"></p>
<p>如果你没有配置链接，你也可以点击新建，手动录入相关的配置信息。如果你看不懂这句话，说明你不是服务的拥有者，没有配置信息。</p>
<p>本人不提供配置链接，请勿索要，谢谢。</p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>本文只是简单的提供如何使用链接添加服务器，这也是最经常使用最简单的方式。如果你需要知道更多该软件的使用方法，请善用<a href="https://www.google.com/">谷歌</a>和<a href="https://www.baidu.com/">百度</a>。</p>
<p>全文完！</p>
]]></content>
      <tags>
        <tag>工具</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 11安装wsl2，ROS以及窗口可视化</title>
    <url>/posts/451c48f3/</url>
    <content><![CDATA[<p> 目的：在windows系统上安装ubuntu系统、安装linux版本的ROS，并且可以使用ubuntu系统中安装软件的图形界面。</p>
<ul>
<li>安装wsl2</li>
</ul>
<p>请遵循微软官方的安装说明，<a href="https://learn.microsoft.com/zh-cn/windows/wsl/install-manual">wsl2安装</a>。</p>
<p>请注意，第四步的内核更新包非常重要，如果缺少，将无法正常使用图形化界面。</p>
<p>完成上面的安装，并且设置好账户和密码之后，需要对wsl功能进行升级，以便使用GUI界面。</p>
<p>以管理员身份打开PowerShell（不知道怎么操作，请百度），然后输入以下命令：</p>
<pre><code>wsl --update
</code></pre>
<p>然后重启wsl使之生效：</p>
<pre><code>wsl --shutdown
</code></pre>
<p>再重新打开ubuntu子系统就可以使用图形界面了。</p>
<ul>
<li>安装ROS</li>
</ul>
<p><a href="http://wiki.ros.org/melodic/Installation/Ubuntu">ROS</a>，请移步ROS官网安装说明，和在ubuntu主机上安装没有区别。</p>
<ul>
<li>运行</li>
</ul>
<p> 打开win11自带的终端，如下图所示，选择你想要开启的 ubuntu系统版本，点击等待片刻，即可开机。</p>
<p> <img src="https://s2.loli.net/2022/12/10/wiFdS25tg1DhAlY.png" alt="终端"></p>
<p>运行ROS</p>
<p> <img src="https://s2.loli.net/2022/12/10/qcGPNrO2jmDbuQJ.png" alt="roscore"></p>
<p>运行rviz</p>
<p> <img src="https://s2.loli.net/2022/12/10/nRP29ukhsQi4Sxb.png" alt="rviz"></p>
<p>这样你就可以像在Ubuntu主机上一样使用ROS了。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>系统</tag>
        <tag>wsl2</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>双系统下重装Win10，ubuntu无法进入</title>
    <url>/posts/92a850f6/</url>
    <content><![CDATA[<p>自己笔记本有两个固态硬盘，一个盘装win10，一个盘装ubuntu，都是UEFI引导，硬盘都是GPT分区。</p>
<p>前段时间因为修改注册表之前没备份，把电脑搞坏了，就重装了win10。然后悲剧了，系统引导里没有了ubuntu。网上找遍各种方法，最终找到了使用ubuntu安装U盘引导修复的方法。</p>
<ol>
<li><p>使用<a href="http://rufus.ie/zh/">rufus</a>+U盘制作<a href="https://ubuntu.com/download/desktop">Ubuntu</a>的系统安装盘。我制作的时候选择的分区类型是GPT，不是默认的MBR,这个具体要看你是如何安装的系统。</p>
</li>
<li><p>插入做好的Ubuntu系统盘，重启电脑，进入BIOS设置，选择U盘作为第一启动项</p>
</li>
<li><p>进入后，选择试用Ubuntu，然后记得一定给系统联网 </p>
</li>
<li><p>打开命令行，输入以下命令：</p>
<pre><code> sudo add-apt-repository ppa:yannubuntu/boot-repair &amp;&amp; sudo apt-get update  
</code></pre>
</li>
<li><p>再接着输入：</p>
<pre><code> sudo apt-get install -y boot-repair &amp;&amp; boot-repair
</code></pre>
</li>
</ol>
<p>耐心等待，在弹出来的对话框中选择第一个“Recommended repair”，接着它可能会提示你什么，点yes即可。稍等片刻，修复完毕。重启电脑，拔掉U盘，就能看到那个熟悉的系统选择界面了。</p>
<p>本文参考：<a href="https://blog.csdn.net/weixin_42718092/article/details/88794952">https://blog.csdn.net/weixin_42718092/article/details/88794952</a></p>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>工具合集</title>
    <url>/posts/93b58b28/</url>
    <content><![CDATA[<ul>
<li>图床工具 <a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a></li>
<li>网页视频下载工具Cococut，可以下载大部分网页上的视频，直接在Chrome或者edge的浏览器插件商店搜索即可找到安装。</li>
<li>截图软件 <a href="https://flameshot.org/#download">flameshot</a>, 点击<a href="https://flameshot.org/docs/guide/key-bindings/">这里</a>是快捷键启动软件截图的设置说明，拉到最下面是Ubuntu的相关设置。</li>
<li>未完待续…</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>索引合集</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04上安装AX210驱动</title>
    <url>/posts/79edb564/</url>
    <content><![CDATA[<p>Intel 官网给出了在Linux下AX210所需要的最低环境：linux内核5.10+，而Ubuntu18.04内核版本为5.4，不符合要求。可以通过升级内核的方式安装，但存在较大的风险。因此选择不升级内核的方法进行驱动的安装。</p>
<p><strong>关闭主板security boot</strong><br><strong>关闭主板security boot</strong><br><strong>关闭主板security boot</strong></p>
<p>安装步骤：</p>
<ul>
<li><p>更新软件列表</p>
<pre><code>sudo apt update
</code></pre>
</li>
<li><p>安装必要的包</p>
<pre><code>sudo apt install flex bison
</code></pre>
</li>
<li><p>下载backport仓库</p>
<pre><code>git clone https://github.com/intel/backport-iwlwifi.git
cd backport-iwlwifi
</code></pre>
</li>
<li><p>进入iwlwifi-stack-dev文件并编译</p>
<pre><code>cd iwlwifi-stack-dev
sudo make defconfig-iwlwifi-public
sudo make
sudo make install
</code></pre>
<p>  执行安装之后重启系统。</p>
</li>
<li><p>下载驱动文件</p>
<pre><code>git clone git://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git
cd linux-firmware/
sudo cp iwlwifi-* /lib/firmware
</code></pre>
</li>
<li><p>Load the iwlwifi module by running the following command</p>
<pre><code>sudo modprobe iwlwifi
</code></pre>
</li>
<li><p>Verify that the Wi-Fi device is recognized by running the following command:</p>
<pre><code>lspci | grep Wireless
</code></pre>
<p>  这时设置里WiFi应该就可以使用了。但是这种方式蓝牙依然无效。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装Nodejs</title>
    <url>/posts/7a25054b/</url>
    <content><![CDATA[<ul>
<li><p>更新软件源</p>
<pre><code>  sudo apt update
</code></pre>
</li>
<li><p>在 Ubuntu安装 Node.js 14</p>
<pre><code>  curl -sL https://deb.nodesource.com/setup_14.x | sudo bash -
</code></pre>
<p>  想安装15版本的就把上面的14改成15</p>
</li>
<li><p>安装nodejs</p>
<pre><code>  sudo apt -y install nodejs
</code></pre>
</li>
<li><p>验证安装的 Node.js 版本</p>
<pre><code>  node  -v

  v14.19.1
</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu实时内核PREEMPT_RT kernel 安装英伟达驱动和CUDA</title>
    <url>/posts/5b4739c/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://www.gongsunqi.xyz/posts/6fc37114/">上一篇文章</a>介绍了Ubuntu如何编译安装实时内核PREEMPT_RT kernel。</p>
<p>由于英伟达官方的驱动并不支持实时内核，因此当我们用普通方式安装英伟达驱动时便会遇到错误。</p>
<p>这里将介绍为实时内核的Ubuntu系统安装英伟达驱动和CUDA的方法。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>一个全新安装的Ubuntu系统，已经按照<a href="https://www.gongsunqi.xyz/posts/6fc37114/">上一篇文章</a>安装了实时内核，并且没有安装任何英伟达驱动。</p>
<p>也可以按照以下方法卸载已经安装的驱动，然后重启</p>
<pre><code>sudo apt-get --purge remove nvidia*
sudo apt-get --purge remove &quot;*cublas*&quot; &quot;cuda*&quot;
sudo apt-get --purge remove libnvidia*
reboot
</code></pre>
<h2 id="下载驱动"><a href="#下载驱动" class="headerlink" title="下载驱动"></a>下载驱动</h2><p>从<a href="https://developer.nvidia.com/cuda-12-0-0-download-archive?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=20.04&target_type=runfile_local">CUDA Toolkit 12.0 Downloads</a>下载runfile文件到本地。</p>
<p>下载<a href="https://developer.nvidia.com/rdp/cudnn-archive">cuDNN</a>,我们选择Download cuDNN v8.9.2 (June 1st, 2023), for CUDA 12.x —&gt; Local Installer for Linux x86_64 (Tar)</p>
<p><img src="https://s2.loli.net/2023/08/28/NeqS5y7PMpujoLv.png"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1.安装runfile</p>
<pre><code># 1. Stop X-Server
sudo service lightdm stop

# 2. Blacklist Nouveau driver
sudo nano /etc/modprobe.d/blacklist-nouveau.conf

# Insert into file:
blacklist nouveau
options nouveau modeset=0

# 3. Update kernel initramfs
sudo update-initramfs -u
reboot  

# 4. Install driver!
sudo IGNORE_PREEMPT_RT_PRESENCE=1 bash &lt;*&gt;.run  # Insert downloaded .run file

# 5. Reboot
sudo reboot
</code></pre>
<p> 安装过程中会弹出来一个对话框，让你选择安装的内容，默认安装即可。</p>
<p> 安装结束之后执行nvcc -v，会提示没有nvcc可执行，这并不是因为我们cudatoolkit没安装好，而是因为环境变量还没配置好。</p>
<p>2.cuda环境变量配置</p>
<pre><code>sudo nano ~/.bashrc
</code></pre>
<p>  将以下内容添加进文件最后</p>
<pre><code>export PATH=/usr/local/cuda-12.0/bin$&#123;PATH:+:$&#123;PATH&#125;&#125;
export LD_LIBRARY_PATH=/usr/local/cuda-12.0/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;
</code></pre>
<p>  保存退出后（Ctrl+x），更新一下环境变量：</p>
<pre><code>source ~/.bashrc
</code></pre>
<p>  这时候在执行 nvcc -V 就能够显示cuda版本了。</p>
<p>3.安装cudnn</p>
<p>  严格来讲cuDNN不能叫安装。它其实是对CUDA的一些补充，所以“安装”过程很简单。去英伟达官网下载对应CUDA12.0的cuDNN压缩包(这一步可能需要注册英伟达账号)。解压之后得到cuda目录，cuda目录下面有include和lib64两个子目录，将这两个目录下面的所有文件拷贝到CUDA 12.0安装路径对应的目录下面即可。</p>
<pre><code>tar -xvf cudnn** 
cd cudnn-linux-x86_64-8.9.3.28_cuda12-archive
#以下是安装命令     
sudo cp -r /lib/* /usr/local/cuda-12.0（自己检查具体的版本修改路径）/lib64/
sudo cp -r /include/* /usr/local/cuda-12.0（自己检查具体的版本修改路径）/include/

#为更改读取权限：
sudo chmod a+r /usr/local/cuda-12.0（自己检查具体的版本修改路径）/include/cudnn*
sudo chmod a+r /usr/local/cuda-12.0（自己检查具体的版本修改路径）/lib64/libcudnn*
</code></pre>
<p>  注意操作要在相应的文件夹下进行哦！</p>
<p>4.检查cudnn是否安装成功</p>
<p>   cat &#x2F;usr&#x2F;local&#x2F;cuda-12.0&#x2F;include&#x2F;cudnn_version.h | grep CUDNN_MAJOR -A 2</p>
<p>  <img src="https://s2.loli.net/2023/08/28/nH1v8lZyd3LcpM6.png"></p>
<h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p>检查内核</p>
<pre><code>uname -r
</code></pre>
<p>检查cuda</p>
<pre><code>nvcc -V
</code></pre>
<p>检查nvidia驱动</p>
<pre><code>nvidia-smi
</code></pre>
<p>最后得到 </p>
<p><img src="https://s2.loli.net/2023/08/28/Dum7YsZi2k48SN5.png"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
        <tag>kernal</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu新环境配置手册</title>
    <url>/posts/1e127ae5/</url>
    <content><![CDATA[<p>每次重装系统之后，都得需要花费大量的时间来重新配置环境，有些时候之前配置的方式已经忘记了，需要花时间搜索，这种方式效率很低，很可能搜到一些不可用的教程。<br>因此这篇博客用来记录自己配置环境的整个过程。</p>
<h2 id="搜狗输入法"><a href="#搜狗输入法" class="headerlink" title="搜狗输入法"></a>搜狗输入法</h2><p><a href="https://shurufa.sogou.com/linux">下载</a><br><a href="https://shurufa.sogou.com/linux/guide">配置安装</a></p>
<p>安装后显示搜狗输入法，但是无法输入中文：</p>
<pre><code>sudo apt install libqt5qml5 libqt5quick5 libqt5quickwidgets5 qml-module-qtquick2

sudo apt install libgsettings-qt1
</code></pre>
<p>这个命令，上面的配置安装说明后面有写。</p>
<h2 id="vscode-插件"><a href="#vscode-插件" class="headerlink" title="vscode 插件"></a>vscode 插件</h2><ol>
<li>Copilot 基于gpt3的AI代码生成</li>
<li>Mrakdown Preview Enhanced</li>
<li>Markdown PDF</li>
</ol>
<h2 id="安装美化主题"><a href="#安装美化主题" class="headerlink" title="安装美化主题"></a>安装美化主题</h2><p>参考<a href="https://1145141919810.wang/2021-02-28/Ubuntu-20-04-LTS-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96-%E2%80%94%E2%80%94-%E4%BB%BF-Big-Sur-%E9%A3%8E%E6%A0%BC/">美化</a></p>
<h2 id="Hexo博客迁移"><a href="#Hexo博客迁移" class="headerlink" title="Hexo博客迁移"></a>Hexo博客迁移</h2><p><a href="https://www.gongsunqi.xyz/posts/d0b820b4/">将HEXO博客迁移到一台新的电脑</a></p>
<h2 id="图床软件PicGo"><a href="#图床软件PicGo" class="headerlink" title="图床软件PicGo"></a>图床软件PicGo</h2><p><a href="https://github.com/Molunerfinn/PicGo">PicGo</a></p>
<p><a href="https://bella722.github.io/post/3c4ff36.html">AppImage创建启动图标</a></p>
<h2 id="Qv2ray和Naiveproxy"><a href="#Qv2ray和Naiveproxy" class="headerlink" title="Qv2ray和Naiveproxy"></a>Qv2ray和Naiveproxy</h2><p><a href="https://github.com/Qv2ray/Qv2ray">Qv2ray</a></p>
<p><a href="https://www.dongvps.com/2022-10-27/naiveproxy%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E8%84%9A%E6%9C%AC%E5%8F%91%E5%B8%83%EF%BC%88%E5%8F%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AB%AF%E5%8F%A3%EF%BC%89/">NaiveProxy</a></p>
<h2 id="录屏软件"><a href="#录屏软件" class="headerlink" title="录屏软件"></a>录屏软件</h2><p>simplescreenrecord0.3.6版本:</p>
<h2 id="快捷截图软件"><a href="#快捷截图软件" class="headerlink" title="快捷截图软件"></a>快捷截图软件</h2><p>flameshot</p>
<pre><code>sudo apt-get install flameshot
</code></pre>
<p>安装之后，4K显示器设置150%等非整数缩放会导致截图不完整等问题，解决方法：</p>
<pre><code>echo &quot;export QT_AUTO_SCREEN_SCALE_FACTOR=1&quot; &gt;&gt; ~/.profile
</code></pre>
<p>该命令的作用是开启QT的自动缩放功能。flameshot基于QT5.9+环境，QT内置了缩放功能，只是很多软件不默认开启。</p>
<h2 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h2><p><a href="https://github.com/huan/docker-wechat">DotChat</a></p>
<p>这是一个在docker中运行的程序，因此需要安装docker：</p>
<pre><code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun
</code></pre>
<p><a href="https://www.runoob.com/docker/ubuntu-docker-install.html">Docker教程</a></p>
<p>docker 常用命令：</p>
<h2 id="bt下载transmission"><a href="#bt下载transmission" class="headerlink" title="bt下载transmission"></a>bt下载transmission</h2><p><a href="https://transmissionbt.com/">Transmission</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu编译安装实时内核</title>
    <url>/posts/6fc37114/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用panda机械臂时，需要使用Linux的实时内核以保证控制性能（1000hz的频率）。而Ubuntu自带的内核实时性满足不了需求，因此需要自行编译一个实时内核。</p>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>1.查看自己系统目前的内核版本</p>
<pre><code>uname -r
</code></pre>
<p>2.下载安装实时内核文件</p>
<p> 我安装的是Ubuntu20.04.6 LTS，内核版本是 5.15.0.79.86。因此我需要安装最新的5.15版本的PREEMPT_RT内核，在这个<a href="https://cdn.kernel.org/pub/linux/kernel/projects/rt/5.15/">网站</a>。（安装和当前默认内核最接近的RT内核，遇到问题的可能性最小）</p>
<p> 下载 patch-5.15.125-rt66.patch.gz</p>
<p>  <img src="https://s2.loli.net/2023/08/27/mXT5ird1eRK9LxD.png"></p>
<p> 这个网站<a href="https://wiki.linuxfoundation.org/realtime/start">linuxfoundation</a>可以查看最新的PREEMPT_RT内核。</p>
<p> 创建一个新的文件夹：</p>
<pre><code>mkdir ~/kernel
</code></pre>
<p> 进入这个文件夹：</p>
<pre><code>cd ~/kernel
</code></pre>
<p> 从这个网站 <a href="https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/">https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/</a>  去下载 5.15.125版本的内核文件：</p>
<pre><code>wget https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-5.15.125.tar.gz
</code></pre>
<p> 你也可以手动下载这个文件，然后复制到kernel文件夹。</p>
<p> 解压：</p>
<pre><code>tar -xzf linux-5.15.125.tar.gz
</code></pre>
<p> 下载对应的rt_preempt patch, 对我们来说就是刚刚的patch-5.15.125-rt66.patch.gz</p>
<pre><code>wget http://cdn.kernel.org/pub/linux/kernel/projects/rt/5.15/patch-5.15.125-rt66.patch.gz
</code></pre>
<p> 你也可以手动下载，然后拷贝到kernel文件夹。</p>
<p> 解压</p>
<pre><code>gunzip patch-5.15.125-rt66.patch.gz
</code></pre>
<p> 切换目录，打实时补丁</p>
<pre><code>cd linux-*/
patch -p1 &lt; ../patch-*.patch
</code></pre>
<p> 复制当前引导的内核配置作为新实时内核的默认配置</p>
<pre><code>cp -v /boot/config-$(uname -r) .config
</code></pre>
<p> 打开“软件和更新”。在 Ubuntu 软件菜单中勾选“源代码”框</p>
<p> 我们需要一些工具来构建内核，安装它们：</p>
<pre><code>sudo apt-get build-dep linux
sudo apt-get install zstd
sudo apt-get install libncurses-dev flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf fakeroot
</code></pre>
<p> 启用所有 Ubuntu 配置，我们只需使用：</p>
<pre><code>yes &#39;&#39; | make oldconfig
</code></pre>
<p> 然后我们需要在内核中启用rt_preempt：</p>
<pre><code>make menuconfig
</code></pre>
<p> 并设置以下内容：</p>
<pre><code># Enable CONFIG_PREEMPT_RT
-&gt; General Setup
  -&gt; Preemption Model (Fully Preemptible Kernel (Real-Time))
  (X) Fully Preemptible Kernel (Real-Time)

# Enable CONFIG_HIGH_RES_TIMERS
-&gt; General setup
  -&gt; Timers subsystem
  [*] High Resolution Timer Support

# Enable CONFIG_NO_HZ_FULL
-&gt; General setup
  -&gt; Timers subsystem
  -&gt; Timer tick handling (Full dynticks system (tickless))
    (X) Full dynticks system (tickless)

# Set CONFIG_HZ_1000 (note: this is no longer in the General Setup menu, go back twice)
-&gt; Processor type and features
  -&gt; Timer frequency (1000 HZ)
  (X) 1000 HZ

# Set CPU_FREQ_DEFAULT_GOV_PERFORMANCE [=y]
-&gt;  Power management and ACPI options
  -&gt; CPU Frequency scaling
  -&gt; CPU Frequency scaling (CPU_FREQ [=y])
    -&gt; Default CPUFreq governor (&lt;choice&gt; [=y])
    (X) performance

-&gt;  Cryptographic API 
 -&gt;  Certificates for signature checking (at the very bottom of the list) 
  -&gt; Provide system-wide ring of trusted keys 
   -&gt; Additional X.509 keys for default system keyring
   Remove the “debian/canonical-certs.pem” from the prompt and press Ok

-&gt;  Cryptographic API 
 -&gt;  Certificates for signature checking (at the very bottom of the list) 
  -&gt; Provide system-wide ring of trusted keys 
   -&gt; X.509 certificates to be preloaded into the system blacklist keyring 
   Remove the “debian/canonical-certs.pem” from the prompt and press Ok
</code></pre>
<p> 保存以上配置，退出 。</p>
<p> 编译内核：</p>
<pre><code>make -j `nproc` deb-pkg
</code></pre>
<p>根据CPU性能大概需要10-30分钟。</p>
<p>然后我们安装所有内核 debian 软件包</p>
<pre><code>sudo dpkg -i ../*.deb
</code></pre>
<p>现在应该安装实时内核了。重新启动系统并检查新的内核版本</p>
<pre><code>reboot
uname -r
</code></pre>
<p> <img src="https://s2.loli.net/2023/08/27/DoybrVY8iL4Pquk.png"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>无法使用微软账号登录远程桌面</title>
    <url>/posts/87ef8cc1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当我们费尽千辛万苦设置好了vps的frp内网穿透，可以使用浏览器登录dashboard，在准备远程登录时却发现，微软远程桌面在输入用户名密码点击连接后，系统却提示“之前用于连接到的凭据无法工作 请输入新的凭据”的错误。</p>
<p>你尝试换个密码，系统报错依旧，你开始怀疑自己的记性是不是太差了。然后你重置了一下密码，还是无济于事。你开始百度，发现网上各种设置，注册表，组策略什么的都无济于事。你从一开始的高兴逐渐变得沮丧，最后带着遗憾放弃了。</p>
<p>这就是我曾经的心路历程。</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li>本地用户登录的解决办法</li>
<li>微软账户登录下的解决办法</li>
</ul>
<h2 id="本地用户登录的解决办法"><a href="#本地用户登录的解决办法" class="headerlink" title="本地用户登录的解决办法"></a>本地用户登录的解决办法</h2><p>这是一个有点“笨”但是快速的方法，一开始我就是使用的这种笨方法。</p>
<p>在 系统设置–账户–账户设置–你的信息–账户设置–改用本地账户 </p>
<p><img src="https://s2.loli.net/2022/11/11/BadyeWt6wFxqgkS.png"></p>
<p>系统会让你设置一个新的用户名和密码，然后重启设备，你会发现，这时通过远程登录终于可以顺利的连接上了。</p>
<p>太开心了，但是还有一点点遗憾。可是我习惯的东西都在微软账户啊，这样使用是可以但是不方便。那就让我们接着看下一个办法。</p>
<h2 id="微软账户登录下的解决办法"><a href="#微软账户登录下的解决办法" class="headerlink" title="微软账户登录下的解决办法"></a>微软账户登录下的解决办法</h2><p>在 系统设置–账户–账户设置–登录选项</p>
<p>将“为了提高安全性，仅允许对此设备上的Microsoft账户使用Windows Hello登录（推荐）”选项关闭。</p>
<p><img src="https://s2.loli.net/2022/11/11/ZuljXSThQcLxz3K.png"></p>
<p>然后  重启设备–删除PIN登录选项–设置密码登录–设置PIN登录–重启</p>
<p>这时你再尝试远程登录，发现可以通过自己的微软账户和账户密码登录啦。</p>
<p>所以这个问题就出在了使用微软账号以后默认启用了PIN登录，这样远程就连不上了，使用PIN密码也不行。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>rdp</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL基本命令</title>
    <url>/posts/3185deae/</url>
    <content><![CDATA[<p>微软官方链接：<a href="https://learn.microsoft.com/zh-cn/windows/wsl/basic-commands">https://learn.microsoft.com/zh-cn/windows/wsl/basic-commands</a></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows11 + WSL Ubuntu + Pycharm + Conda for deeplearning</title>
    <url>/posts/3c995b2a/</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li>前言</li>
<li>安装wsl</li>
<li>wsl安装anaconda并配置环境</li>
<li>Pycharm连接wsl，并使用conda生成的环境</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通常来说在Linux系统下进行深度学习训练的效率要高于Windows系统，大家通常也是使用Linux常见的发行版本Ubuntu。但是Ubuntu对于日常使用不是很友好，于是就有了折中的方案，使用Windows Subsystem Linux (wsl)。</p>
<p>经过测试，在wsl中的训练效率相比Windows提升了大约25%。以下测试中均使用cuda118,唯一的区别是python版本两个是3.9，一个是3.10。</p>
<p><img src="https://s2.loli.net/2023/03/22/PQYkfEWDysUcCNZ.png" alt="Windows" title="Windows_cu118_py39"></p>
<p><img src="https://s2.loli.net/2023/03/22/ojpRTbrQJi4D1e8.png" alt="ubuntu20" title="ubuntu20.04_cu118_py39"></p>
<p><img src="https://s2.loli.net/2023/03/22/O3Q95mYxHWcB1GT.png" alt="ubuntu22" title="ubuntu22.04_cu118_py310"></p>
<p><img src="https://s2.loli.net/2023/03/22/oaiBn6FWzmxcbHf.png" alt="interpreter" title="Python Interpreter"></p>
<p>视频教程链接：<a href="https://www.bilibili.com/video/BV1ok4y1t7XC/">Bilibili</a>，<a href="https://youtu.be/buyogP-KS5w">Youtube</a></p>
<h2 id="安装wsl"><a href="#安装wsl" class="headerlink" title="安装wsl"></a>安装wsl</h2><p>这一部分参考之前的博客<a href="https://www.gongsunqi.xyz/posts/451c48f3/">windows 11安装wsl2，ROS以及窗口可视化</a>,只需要安装wsl2即可，安装ROS的部分不用理会。</p>
<h2 id="配置cudatoolkit和cudnn"><a href="#配置cudatoolkit和cudnn" class="headerlink" title="配置cudatoolkit和cudnn"></a>配置cudatoolkit和cudnn</h2><p>在Windows11自带的终端中打开上一步安装好的Ubuntu系统，之后的操作就和使用在Ubuntu主机上使用命令行完全一样。</p>
<p><img src="https://s2.loli.net/2023/03/22/ZpNOkRvFwSu8K9H.png"></p>
<p>  wsl2和windows11共用显卡驱动，因此我们只需安装cudatoolkit和cudnn。以后windows显卡驱动正常更新即可。</p>
<p>  conda命令安装后虽然也可以用cudnn，但是不是完整版，不能编译。如果你需要编译功能，还是需要安装完整版本的cudatoolkit。</p>
<ol>
<li><p>安装cudatoolkit</p>
<p> 可直接去官网下载所需版本：<br> <a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a><br> 我安装是11.8版本，因为pytorch官方的conda安装命令最高到11.8~版本对应安装，出问题的可能性最小。</p>
<p> 注意安装的时候选择wsl2版本安装！<br> 注意安装的时候选择wsl2版本安装！<br> 注意安装的时候选择wsl2版本安装！</p>
<p> cuda11.8 wsl2 ubuntu版本的<a href="https://developer.nvidia.com/cuda-11-8-0-download-archive?target_os=Linux&target_arch=x86_64&Distribution=WSL-Ubuntu&target_version=2.0&target_type=deb_local">安装链接</a></p>
<p> <img src="https://s2.loli.net/2023/04/03/7anfJr9zVOxDkYP.png"></p>
<p> 将nvidia官方给的命令，一条条复制到wsl2的ternimal中即可。中间如果遇到问题百度帮到你~</p>
<p> 安装结束之后执行nvcc -v，会提示没有nvcc可执行，这并不是因为我们cudatoolkit没安装好，而是因为环境变量还没配置好。</p>
</li>
<li><p>cuda环境变量配置</p>
<pre><code> sudo nano ~/.bashrc
</code></pre>
<p> 将以下内容添加进文件最后</p>
<pre><code>export PATH=/usr/local/cuda-11.8/bin$&#123;PATH:+:$&#123;PATH&#125;&#125;
export LD_LIBRARY_PATH=/usr/local/cuda-11.8/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;
</code></pre>
<p> 保存退出后（Ctrl+x），更新一下环境变量：</p>
<pre><code>source ~/.bashrc
</code></pre>
<p> 这时候在执行 nvcc -V 就能够显示cuda版本了。</p>
</li>
<li><p>安装cudnn</p>
<p> 严格来讲cuDNN不能叫安装。它其实是对CUDA的一些补充，所以“安装”过程很简单。去英伟达官网下载对应CUDA 11.8的cuDNN压缩包(这一步可能需要注册英伟达账号)。解压之后得到cuda目录，cuda目录下面有include和lib64两个子目录，将这两个目录下面的所有文件拷贝到CUDA 11.8安装路径对应的目录下面即可。</p>
<p> <a href="https://developer.nvidia.com/rdp/cudnn-archive">cudnn下载链接</a></p>
<p> <img src="https://s2.loli.net/2023/04/03/kMSPFbJ2yG3a9TX.png"></p>
<p> 下载8.8.1 for cuda11.x</p>
<p> 将文件保存到windows环境，然后直接复制到wsl2 ubuntu的home目录下，和在windows环境中复制粘贴一样操作。</p>
<p> 在wsl的ternimal中进入到home目录，然后解压下载的文件</p>
<pre><code> sudo tar -xvf cudnn**    #省略部分按tab自动补全
</code></pre>
<p> 然后把解压得到的文件分别拷贝到对应的文件夹（注意，下面命令中的 &#x2F;lib&#x2F;和&#x2F;include&#x2F; 指的是刚刚解压得到的文件夹里的）：</p>
<pre><code> #以下是安装命令     
sudo cp -r /lib/* /usr/local/cuda-11.8（自己检查具体的版本修改路径）/lib64/
sudo cp -r /include/* /usr/local/cuda-11.8（自己检查具体的版本修改路径）/include/

#为更改读取权限：
sudo chmod a+r /usr/local/cuda-11.8（自己检查具体的版本修改路径）/include/cudnn*
sudo chmod a+r /usr/local/cuda-11.8（自己检查具体的版本修改路径）/lib64/libcudnn*
</code></pre>
<p> 注意操作要在相应的文件夹下进行哦！</p>
</li>
<li><p>检查cudnn是否安装成功</p>
<pre><code> cat /usr/local/cuda-11.8/include/cudnn_version.h | grep CUDNN_MAJOR -A 2
</code></pre>
<p>  <img src="https://s2.loli.net/2023/04/13/oe8AZIixlOPXpUc.png"></p>
</li>
</ol>
<h2 id="wsl安装anaconda并配置环境"><a href="#wsl安装anaconda并配置环境" class="headerlink" title="wsl安装anaconda并配置环境"></a>wsl安装anaconda并配置环境</h2><ul>
<li>安装anaconda</li>
</ul>
<p><a href="https://www.anaconda.com/products/distribution">anaconda3官方下载</a>,选择linux版本，鼠标放在其上方右键，复制链接。</p>
<p><img src="https://s2.loli.net/2023/03/22/9PVLksuX6BCxaU8.png"></p>
<p>回到Ubuntu的terminal，输入：</p>
<pre><code>wget https://repo.anaconda.com/archive/Anaconda3-2023.03-Linux-x86_64.sh
</code></pre>
<p>运行以上代码，将会下载anaconda3到wsl ubuntu中。</p>
<p><img src="https://s2.loli.net/2023/03/22/yemLhduQx1rHBGP.png"></p>
<p>之后执行：</p>
<pre><code>sh Anaconda3-2023.03-Linux-x86_64.sh
</code></pre>
<p>只需要输入 sh A 然后按Tab键，系统会自动补齐下面内容。</p>
<p>接下来就是安装过程，只需要根据提示按回车或者输入yes即可。</p>
<h3 id="conda配置环境"><a href="#conda配置环境" class="headerlink" title="conda配置环境"></a>conda配置环境</h3><ol>
<li><p>conda创建虚拟环境</p>
<pre><code> conda create --name cu118py310 python=3.10  #--name 后面是创建环境的名字，按自己的习惯命名，python=XX，输入自己想用的版本号
 conda activate cu118py310 #激活刚刚创建的环境
</code></pre>
<p> <img src="https://s2.loli.net/2023/03/23/imlkrNDYjoqIObA.png" alt="conda env" title="创建虚拟环境"></p>
<p> <img src="https://s2.loli.net/2023/03/23/3ZOdr5pcqtUivIB.png" alt="activate" title="激活环境"></p>
<p> <a href="https://blog.csdn.net/u014628771/article/details/80066624">常用的conda命令</a></p>
</li>
<li><p>配置pytorch</p>
<p> 前往<a href="https://pytorch.org/get-started/locally/">pytorch官网</a>，选择需要的环境（注意这里选择linux OS），复制conda命令,在terminal中粘贴，回车，安装环境：</p>
<p>   <img src="https://s2.loli.net/2023/03/22/VWK7jPvda2rwYsg.png"></p>
<pre><code> conda install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia
</code></pre>
<p>   <img src="https://s2.loli.net/2023/03/23/DSwiAanLlV98M3j.png" alt="pytorch环境" title="配置pytorch环境"></p>
</li>
</ol>
<h2 id="Pycharm连接wsl，并使用conda生成的环境"><a href="#Pycharm连接wsl，并使用conda生成的环境" class="headerlink" title="Pycharm连接wsl，并使用conda生成的环境"></a>Pycharm连接wsl，并使用conda生成的环境</h2><p>Pycharm专业版（社区版和教育版没有方便的wsl功能,软件的下载链接在下面），点击右下选择添加新的Interpreter，操作如下图所示：</p>
<p><img src="https://s2.loli.net/2023/03/23/217LZ495MFT6GCu.png" alt="wsl interpreter" title="add wsl interpreter"></p>
<p>选择自己创建的Linux_distribution，然后Next:</p>
<p><img src="https://s2.loli.net/2023/03/23/VvnQa8Zr6qYkSPD.png"></p>
<p>Virtualenv Enviroment–Existing–点击…–选择这个路径 \wsl$\Ubuntu-22.04\home\username\anaconda3\envs\cu118py310\bin\python3，Create。</p>
<p><img src="https://s2.loli.net/2023/03/23/3r8Fdsbcv7elPZ2.png"></p>
<p>等待片刻，新的环境就配置好了。然后就可以使用这个环境训练跑起来！</p>
<p>软件百度网盘：链接：<a href="https://pan.baidu.com/s/1YkT8CiObO3v2Pnmmld2pqA?pwd=ci4h">https://pan.baidu.com/s/1YkT8CiObO3v2Pnmmld2pqA?pwd=ci4h</a><br>提取码：ci4h<br>Onedrive: <a href="https://1drv.ms/u/s!Arq4VGYuCz4AieNcw-nrj4XXtrugzQ?e=kmmVwH">https://1drv.ms/u/s!Arq4VGYuCz4AieNcw-nrj4XXtrugzQ?e=kmmVwH</a></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Youtube-dl油管下载神器</title>
    <url>/posts/b1b592d6/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前我都是通过浏览器插件来下载油管上的视频，但是过段时间要么插件失效，要么需要付费。前段时间偶然发现了一个在GitHub上开源的油管视频下载神器<a href="https://github.com/ytdl-org/youtube-dl">youtube-dl</a>, 这篇文章就用来记录使用心得（当然你也可以直接去GitHub上看官方文档，as u like)。</p>
<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><ol>
<li>安装ffmpeg</li>
<li>安装Python</li>
<li>安装youtube-dl</li>
<li>下载</li>
</ol>
<h2 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装ffmpeg</h2><p>Fmpeg 是领先的多媒体框架，能够解码、编码、转码、混合、解密、流媒体、过滤和播放人类和机器创造的几乎所有东西。简单来说，我们需要这个软件来帮我们自动处理一些从youtube上下载的软件，最终实现得到一个.mp4文件（也可能是其他格式）。</p>
<ul>
<li>登录<a href="https://www.gyan.dev/ffmpeg/builds/">下载网址</a>,在release处点击第一个链接下载压缩文件，如下图所示（可能随着时间的流逝版本不一样），放在你想放的位置。</li>
</ul>
<p> <img src="https://i.loli.net/2021/08/02/VxP2en8gp9OYQdS.png"></p>
<ul>
<li><p>解压刚刚下载的压缩包，然后将解压后的文件夹复制粘贴到C盘根目录，或者任何你喜欢的位置。</p>
<p>  我的安装路径如下图所示：</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/02/CDdbzESapRxYngr.png"></p>
<ul>
<li><p>定位到\bin文件夹，然后鼠标放到窗口的地址栏，复制这个路径，如我的就是：C:\ffmpeg-4.4-full_build\bin。</p>
</li>
<li><p>此电脑-属性-高级系统设置-环境变量-在系统变量里选中Path-编辑-新建，然后将刚刚复制的路径黏贴进去。之后点击确定-确定-确定。</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/02/tpHqWkV1Pam8nfR.png"><br><img src="https://i.loli.net/2021/08/02/Ovf58xrdy9oHQMa.png"><br><img src="https://i.loli.net/2021/08/02/B23R59qiQbIF7ve.png"></p>
<h2 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h2><p>如果你已经安装过Python，直接跳过这一步。如果没安装过，请跟着步骤来。</p>
<ul>
<li><p>update 2021.9.11 我换了一个已经安装了Python的台式机，但是安装下一步的youtube-dl的时候出错了。卸载Python，然后按照下面的步骤重新安装就可以正常使用了。</p>
</li>
<li><p><a href="https://www.python.org/downloads/">Python官网</a>下载最新的安装包<br><img src="https://i.loli.net/2021/08/02/fDwFpOb5XdYicj8.png"></p>
</li>
<li><p>点击安装，<strong>记得勾选一开始界面最下面的“add to path”那个选择框</strong>，点击安装，等待安装完成，最后点击下方的解除长度限制“disable path length limit”（我因为为了写这篇博客卸载后重装的，所以截图中并没有这个选项）。</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/02/62XJ7SapAoc4gHy.png"><br><img src="https://i.loli.net/2021/08/02/PMBIkX5bc2SrLGR.png"></p>
<h2 id="安装youtube-dl"><a href="#安装youtube-dl" class="headerlink" title="安装youtube-dl"></a>安装youtube-dl</h2><p>如果你的可以正常访问YouTube，请按照这个步骤来，打开电脑的命令行界面，输入以下命令：</p>
<pre><code>pip install youtube-dl
</code></pre>
<p>如果你在国内需要翻墙，那么我们需要先确定一些事情。</p>
<ul>
<li>打开自己的代理软件，运行（务必运行代理）</li>
<li>查看http代理的地址和端口，下图所示是Qv2ray，V2rayNG在软件界面最下方可以直接看到。</li>
</ul>
<p><img src="https://i.loli.net/2021/08/02/K6qFpkN4EJjbhLM.png"></p>
<p>然后打开电脑的cmd命令行界面，依次输入以下命令：</p>
<pre><code>set http_proxy=http://127.0.0.1:8889 #一定记得把ip地址和端口改成自己代理软件中查到的
pip install youtube-dl
set http_proxy=
pause
</code></pre>
<p>没有问题的话，就应该安装完成了。</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载这个文件夹，链接: <a href="https://pan.baidu.com/s/1JL2gB9E1qqPAYgY6sUBWKw">https://pan.baidu.com/s/1JL2gB9E1qqPAYgY6sUBWKw</a> 提取码: pjuw。</p>
<p><img src="https://i.loli.net/2021/08/02/PcoHBYqENDkjU5u.png"></p>
<p>里面包含上图所示的这些东西。</p>
<ul>
<li>如果你需要代理环境，请用记事本打开上图被圈出来的三个文件，然后将代理部分的ip和端口改成自己软件中显示的。这一步类似安装youtube-dl时我们做的事情。<strong>请务必，将框选出来的三个文件都打开检查一遍！</strong></li>
</ul>
<p><img src="https://i.loli.net/2021/08/02/fEbBSNkqo73zH5x.png"></p>
<ul>
<li>如果你不需要代理，那么同样打开这三个文件，将所以和set_proxy有关的语句都注释掉即可。</li>
</ul>
<p>注释的方法也很简单，在语句前面加一个英文输入法状态下的:即可。再啰嗦一句，<strong>请务必，将框选出来的三个文件都打开检查一遍！</strong></p>
<pre><code>:set http_proxy=http://127.0.0.1:8889
:set http_proxy=
</code></pre>
<p>OK！ 随便打开一个油管视频，然后将地址复制到_url.txt这个文件里，然后运行_run.bat，视频就会以最高质量下载到youtube-dl-videos文件夹中。</p>
<p>结束！！</p>
<p>最后，感谢<a href="https://www.bilibili.com/video/BV1AB4y1F7nG?from=search&seid=13837731026935348595">团叽的OO的视频团叽的OO的视频</a>，本文教程属于该视频的文字总结版本。因为担心他的视频也许有一天会找不到，故此做一个文字备份。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>youtube-dl</tag>
      </tags>
  </entry>
  <entry>
    <title>Adobe family</title>
    <url>/posts/21f5392e/</url>
    <content><![CDATA[<p> 微博上有个大佬，一直在分享各种他修改过的Adobe全家桶软件，经过修改的软件直接安装，无需另行破解，就可使用，非常省心</p>
<p> 大佬<a href="https://weibo.com/u/1112829033">vposy微博</a></p>
<p> 看他的置顶，可以找到你想要的东西。</p>
<p> 另外参考我的<a href="https://www.gongsunqi.xyz/2021/09/11/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD/">另一篇文章</a>，对你也会有帮助。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>Adobe</tag>
      </tags>
  </entry>
  <entry>
    <title>frp内网穿透教程，ssh远程连接</title>
    <url>/posts/5a9e5df/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有时候我们需要从公网中远程连接自己的设备（SSH，远程桌面，远程文件等)，虽然诸如teamviewer和向日葵等可以较为方便的实现连接操作，但是网络不稳定，操作卡顿的现象却让我们十分难受。</p>
<p><a href="https://github.com/fatedier/frp/blob/master/README_zh.md">frp</a>内网穿透可以帮助我们实现自己的需求，它是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。具体介绍请点开前面的链接查看官方文档。</p>
<p>先简单看一下技术原理，参见下图[1]：</p>
<p><img src="https://s2.loli.net/2022/03/06/RuEgZyrfo4AjPB1.png" alt="frp实现原理"></p>
<p>图中VPS即是frps(service)，待远程连接的电脑就是frpc(client)。</p>
<p>我们需要借助一台VPS(虚拟主机)来完成中转任务。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li>一台VPS(或者你有公网IP的实体主机)，可以参考之前的文章，<a href="https://www.gongsunqi.xyz/2022/02/08/%E5%A6%82%E4%BD%95%E5%9C%A8IPV4%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BD%BF%E7%94%A8IPV6%E7%BD%91%E7%BB%9C/#%E6%B3%A8%E5%86%8CIPV6%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%A3%E7%90%86%E5%95%86">vultr新建虚拟主机</a></li>
<li>待远程连接的电脑</li>
</ul>
<h1 id="VPS服务器端部署"><a href="#VPS服务器端部署" class="headerlink" title="VPS服务器端部署"></a>VPS服务器端部署</h1><p>假设你VPS上装的是Debian或者Ubuntu的64位系统，这里他俩并没有什么区别。</p>
<ul>
<li><p>远程ssh连接上服务器</p>
</li>
<li><p>下载<a href="https://github.com/fatedier/frp/releases">frp</a>到vps，执行以下命令：<br>wget <a href="https://github.com/fatedier/frp/releases/download/v0.39.1/frp_0.39.1_linux_amd64.tar.gz">https://github.com/fatedier/frp/releases/download/v0.39.1/frp_0.39.1_linux_amd64.tar.gz</a><br>ps:本教程更新时frp最新版本是V0.39.1，请点击前方连接到官网下载最新版</p>
</li>
<li><p>解压:<br> tar -zxvf frp_0.39.1.0_linux_amd64.tar.gz</p>
</li>
<li><p>复制到新的frp文件夹：<br>cp -r frp_0.39.1.0_linux_amd64 frp</p>
</li>
<li><p>进入新目录：<br>cd frp</p>
</li>
<li><p>查看文件<br>ls -a<br>里面会包含frps, frps.ini, frpc, frpc.ini 等文件</p>
</li>
<li><p>这里我们是部署服务器端，所以删除客户端client的文件：<br>rm frpc<br>rm frpc.ini</p>
</li>
<li><p>修改服务器端文件配置，打开frps.ini<br>vim frps.ini</p>
</li>
<li><p>填写以下内容[1]：<br>[common]<br>bind_port &#x3D; 7000<br>dashboard_port &#x3D; 7500<br>token &#x3D; mypwd<br>dashboard_user &#x3D; root<br>dashboard_pwd &#x3D; 123456<br>vhost_http_port &#x3D; 10080<br>vhost_https_port &#x3D; 10443<br># frp日志配置<br>log_file &#x3D; &#x2F;var&#x2F;log&#x2F;frps.log<br>log_level &#x3D; info<br>log_max_days &#x3D; 3</p>
</li>
</ul>
<h2 id="一些解释"><a href="#一些解释" class="headerlink" title="一些解释"></a>一些解释</h2><ol>
<li>“bind_port”表示用于客户端和服务端连接的端口，这个端口号我们之后在配置客户端的时候要用到。</li>
<li>“dashboard_port”是服务端仪表板的端口，若使用7500端口，在配置完成服务启动后可以通过浏览器访问 x.x.x.x:7500 （其中x.x.x.x为VPS的IP）查看frp服务运行信息。</li>
<li>“token”是用于客户端和服务端连接的口令，请自行设置并记录，稍后会用到。</li>
<li>dashboard_user”和“dashboard_pwd”表示打开仪表板页面登录的用户名和密码，自行设置即可。</li>
<li>vhost_http_port”和“vhost_https_port”用于反向代理HTTP主机时使用，本文不涉及HTTP协议，因而照抄或者删除这两条均可。</li>
</ol>
<ul>
<li><p>编辑完成后，保存退出。(vim的命令：先按Esc，然后英文状态下的 :  然后输入wq  (代表write和quit))。</p>
</li>
<li><p>开放防火墙端口<br>sudo apt install firewalld<br>sudo firewall-cmd –permanent –add-port&#x3D;7000&#x2F;tcp<br>sudo firewall-cmd –permanent –add-port&#x3D;7500&#x2F;tcp<br>sudo firewall-cmd –permanent –add-port&#x3D;7001&#x2F;tcp<br>sudo firewall-cmd –reload</p>
</li>
<li><p>运行frps服务<br>.&#x2F;frps -c frps.ini</p>
</li>
<li><p>如果看到类似下面的内容，说明成功了：<br>2022&#x2F;03&#x2F;06 15:22:39 [I] [service.go:130] frps tcp listen on 0.0.0.0:7000<br>2022&#x2F;03&#x2F;06 15:22:39 [I] [service.go:172] http service listen on 0.0.0.0:10080<br>2022&#x2F;03&#x2F;06 15:22:39 [I] [service.go:193] https service listen on 0.0.0.0:10443<br>2022&#x2F;03&#x2F;06 15:22:39 [I] [service.go:216] Dashboard listen on 0.0.0.0:7500<br>2022&#x2F;03&#x2F;06 15:22:39 [I] [root.go:210] Start frps success</p>
</li>
</ul>
<p>这时访问x.x.x.x:7500 (x.x.x.x是你的VPS提供的IP) 并使用自己设置的用户名密码登录，即可看到仪表板界面。<br><img src="https://s2.loli.net/2022/03/06/WvsryxcB6GAi9wN.png" alt="控制面板"></p>
<p>如果此时我们关闭terminal，刚才运行的frps会自动结束，这时我们就需要把它挂在后台。</p>
<h1 id="服务器端后台运行及开机自启"><a href="#服务器端后台运行及开机自启" class="headerlink" title="服务器端后台运行及开机自启"></a>服务器端后台运行及开机自启</h1><pre><code>  nano /lib/systemd/system/frps.service

  [Unit]
  Description=frps service
  After=network.target syslog.target
  Wants=network.target

  [Service]
  Type=simple
  # frp安装目录
  ExecStart=/root/frp_0.39.1_linux_amd64/frps -c /root/frp_0.39.1_linux_amd64/frps.ini

  [Install]
  WantedBy=multi-user.target
</code></pre>
<p>  启动服务并设置开机启动:</p>
<pre><code>  sudo systemctl enable frps
  sudo systemctl start frps
</code></pre>
<p>这时我们重启服务器，无需任何手动操作，仍然可以通过x.x.x.x:7500访问后台面板。</p>
<h1 id="客户端部署"><a href="#客户端部署" class="headerlink" title="客户端部署"></a>客户端部署</h1><ul>
<li><p>这一步用来设置需要被远程连接的设备，我们以Linux系统的电脑为例，还是同服务器端一样下载文件，解压，复制到新文件夹，然后删除frps和frps.ini。</p>
</li>
<li><p>打开 frpc.ini，编辑以下内容：</p>
<pre><code>[common]
server_addr = x.x.x.x
server_port = 7000
token = mypwd
[ssh]
type = tcp
local_ip = 127.0.0.1           
local_port = 22
remote_port = 6000 
[ssh2]
type = tcp
local_ip = 127.0.0.1           
local_port = 50000
remote_port = 50000
[ssh3]
type = tcp
local_ip = 127.0.0.1           
local_port = 50001
remote_port = 50002
[rdp]
type = tcp
local_ip = 127.0.0.1           
local_port = 3389
remote_port = 7001  
[smb]
type = tcp
local_ip = 127.0.0.1
local_port = 445
remote_port = 7002
</code></pre>
<p>其中common字段下的三项是我们早先在服务器端设置的内容。<br>如果我们只需要ssh服务，下面的rdp和smb内容可以不填写。<br>如果需要一个服务器给多台设备提供frp服务，可以使用以上设置多个ssh。</p>
</li>
<li><p>运行服务<br>.&#x2F;frpc -c frpc.ini</p>
</li>
<li><p>后台挂起<br>nohup .&#x2F;frpc -c frpc.ini &amp;</p>
</li>
<li><p>Windows客户端使用</p>
<p>在文章开头下载frp的网址下载对应的Windos版本，这里我们需要编辑client客户端的配置，即frpc.ini</p>
<pre><code>[common]
server_addr = x.x.x.x
server_port = 7000
token = mypwd
[ssh]
type = tcp
local_ip = 127.0.0.1           
local_port = 22
remote_port = 6000 
[ssh2]
type = tcp
local_ip = 127.0.0.1           
local_port = 50000
remote_port = 50000
[rdp]
type = tcp
local_ip = 127.0.0.1           
local_port = 3389
remote_port = 7001  
[smb]
type = tcp
local_ip = 127.0.0.1
local_port = 445
remote_port = 7002
</code></pre>
</li>
<li><p>然后再写一个脚本启动服务start.bat：</p>
<pre><code>@echo off

if &quot;%1&quot; == &quot;h&quot; goto begin
mshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;%~nx0 h&quot;,0)(window.close)&amp;&amp;exit
:begin

  ## 这个替换成你自己的文件路径
cd /d &quot;D:\software\frp_0.39.1.0_windows_amd64&quot;

frpc -c frpc.ini
</code></pre>
<p>之后每次重启电脑，需要开启frp服务，只需要双击执行这个脚本即可。</p>
</li>
<li><p>开机自启动<br>上面的脚本可以在开机之后双击启动frpc服务，但是如果想每次开机时自启动该服务，则需要另外一个脚本来辅助。<br>ps:笔者尝试将上文中的start.bat放入开机启动文件夹，但是会有报错。<br>首先写一个start.bat脚本：</p>
<pre><code>@echo off
cd /d &quot;D:\software\frp_0.39.1.0_windows_amd64&quot;
frpc -c frpc.ini
</code></pre>
<p>再写一个start.vbs脚本：</p>
<pre><code>CreateObject(&quot;WScript.Shell&quot;).Run &quot;cmd /c D:\frp_0.39.1_windows_amd64\start.bat&quot;,0
</code></pre>
<p>注意把文件中start.bat所在文件夹的路径替换成你自己的。</p>
<p>建议将start.bat和start.vbs都放在你的frp文件夹内。</p>
<p>然后在windows的组策略–计算机配置–windows设置–脚本（启动&#x2F;关机）–启动–添加–选择start.vbs，然后应用–确定。</p>
<p><img src="https://s2.loli.net/2022/11/16/JIh3sbaonEMH1vC.png"></p>
</li>
<li><p>linux系统开机自启</p>
<p>类似于服务器端：</p>
<pre><code>nano /lib/systemd/system/frpc.service

[Unit]
Description=frpc service
After=network.target syslog.target
Wants=network.target

[Service]
Type=simple
# frp安装目录
ExecStart=/root/frp_0.39.1_linux_amd64/frpc -c /root/frp_0.39.1_linux_amd64/frpc.ini

[Install]
WantedBy=multi-user.target
</code></pre>
<p>启动服务并设置开机启动:</p>
<pre><code>sudo systemctl enable frpc
sudo systemctl start frpc
</code></pre>
</li>
</ul>
<h2 id="一些解释-1"><a href="#一些解释-1" class="headerlink" title="一些解释"></a>一些解释</h2><ol>
<li>“[xxx]”表示一个规则名称，自己定义，便于查询即可。</li>
<li>“type”表示转发的协议类型，有TCP和UDP等选项可以选择，如有需要请自行查询frp手册。</li>
<li>“local_port”是本地应用的端口号，按照实际应用工作在本机的端口号填写即可。</li>
<li>“remote_port”是该条规则在服务端开放的端口号，自己填写并记录即可。</li>
</ol>
<blockquote>
<p>RDP，即Remote Desktop 远程桌面，Windows的RDP默认端口是3389，协议为TCP，建议使用frp远程连接前，在局域网中测试好，能够成功连接后再使用frp穿透连接。</p>
</blockquote>
<blockquote>
<p>SMB，即Windows文件共享所使用的协议，默认端口号445，协议TCP，本条规则可实现远程文件访问。</p>
</blockquote>
<h1 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h1><ul>
<li><p>远程连接的电脑是linux系统<br>Linux可以直接打开terminal，Windows可以使用ssh工具，比如putty或者MobaXterm，在命令行界面输入x.x.x.x:6000，这里的6000是你自己设置的端口，可以是任何你设置的数字，然后输入本地用户名和密码就可以成功连接。</p>
</li>
<li><p>远程连接的电脑是windows<br>可以直接使用windows电脑自带的远程连接工具，输入vps ip:远程端口，即可输入用户名和密码登录。例如，远程主机ip是1.2.3.4，frpc.ini中设置的remote_port &#x3D; 7001，可以输入1.2.3.4:7001远程连接电脑。</p>
</li>
</ul>
<p>如果待连接的电脑是笔记本电脑或者是使用wifi连接的设备，那么在你远程登录过程中，待连接电脑会自动锁屏，然后断掉wifi。。。。目前我还找到解决这个问题的办法，只能使用网线连接。</p>
<p>连接过程中可能出现的问题参考文章 <a href="https://www.gongsunqi.xyz/2022/11/11/%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E5%BE%AE%E8%BD%AF%E8%B4%A6%E5%8F%B7%E7%99%BB%E5%BD%95%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/">微软远程桌面登录</a></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li>[1] <a href="https://sspai.com/post/52523/">https://sspai.com/post/52523/</a></li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在godaddy上注册并使用一个域名</title>
    <url>/posts/baff2d21/</url>
    <content><![CDATA[<p>首先登录<a href="https://hk.godaddy.com/offers/domains/godaddy-b">godaddy</a>网站注册一个自己的账户，然后搜索一个自己喜欢的域名，找个最便宜的付款买了。<br><img src="https://s2.loli.net/2022/02/09/eqiBTaJd4Mp93kl.png"></p>
<p>然后我的产品-管理DNS<br><img src="https://s2.loli.net/2022/02/09/fP9sSEtkbA8FMZp.png"></p>
<p>新增<br><img src="https://s2.loli.net/2022/02/09/qSLrA1o5OpWskHu.png"><br>类型-A; 名称-随你取，假设我们取anyname；内容值-你服务器的IP地址；TTL-1h<br>假设你的域名是yoursite.xyz<br>这样设置好之后，你服务器的ip地址就和anyname.yoursite.xyz建立了映射关系，你在命令行窗口 ping anyname.yoursite.xyz 就显示出你的服务器ip。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>linux磁盘性能测试</title>
    <url>/posts/f8cc8ef6/</url>
    <content><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>安装fio</p>
<pre><code>sudo apt install fio
</code></pre>
<h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>随机读4k Q1T1，即随机读取4K大小的数据，队列深度1，线程1</p>
<pre><code>fio -filename=/tmp/test_randread -direct=1 -iodepth 1 -thread -rw=randread -ioengine=psync -bs=4k -size=2G -numjobs=1 -runtime=60 -group_reporting -name=mytest
</code></pre>
<p>其中-filename&#x3D;&#x2F;tmp&#x2F;test_randread 为我们要测试的文件的路径以及名称，tmp是根目录下的一个文件夹，test_randread是我们测试过程中会生产的一个文件，不用管它。如果我们有多块硬盘要测试，比如我的根目录安装在傲腾905p中，同时一块970evoplus挂载在home的mydata文件下。如果我想测试970evo plus的性能，只需要执行下面的命令,记得将kdt替换为自己的用户名：</p>
<pre><code>fio -filename=/home/kdt/mydata/test_randread -direct=1 -iodepth 1 -thread -rw=randread -ioengine=psync -bs=4k -size=2G -numjobs=1 -runtime=60 -group_reporting -name=mytest
</code></pre>
<p>随机写4k：</p>
<pre><code>fio -filename=/home/kdt/Documents/test_randwrite -direct=1 -iodepth 1 -thread -rw=randwrite -ioengine=psync -bs=4k -size=2G -numjobs=1 -runtime=60 -group_reporting -name=mytest
</code></pre>
<p>这里建议在测试写性能的时候尽量不要是装系统的根目录分区，而是使用home分区。</p>
<p>顺序读：</p>
<pre><code>fio -filename=/home/kdt/Documents/seq_read -direct=1 -iodepth 8 -thread -rw=read -ioengine=psync -bs=1024k -size=2G -numjobs=10 -runtime=60 -group_reporting -name=mytest
</code></pre>
<p>顺序写：</p>
<pre><code>fio -filename=/home/username/Documents/seq_write -direct=1 -iodepth 8 -thread -rw=write -ioengine=psync -bs=1024k -size=2G -numjobs=10 -runtime=60 -group_reporting -name=mytest
</code></pre>
<p>增大队列深度和线程数可以增加顺序读写的速度，能够得到更接近官方宣传的数值。但是我主要关心4K性能，所以具体设成哪些数值，等待你自己去发现吧。</p>
<p>混合随机读写：</p>
<pre><code>fio -filename=/home/username/Documents/read_write -direct=1 -iodepth 1 -thread -rw=randrw -rwmixread=70 -ioengine=psync -bs=16k -size=2G -numjobs=10 -runtime=60 -group_reporting -name=mytest -ioscheduler=noop
</code></pre>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>配置pycharm中wsl的ternimal，激活conda虚拟环境</title>
    <url>/posts/bf803213/</url>
    <content><![CDATA[<p>本文的前提条件是你已经正确配置了wsl，如果不确定可以参考之前的教程<a href="https://www.gongsunqi.xyz/posts/3c995b2a/">Windows11 + WSL Ubuntu + Pycharm + Conda for deeplearning</a>。</p>
<p><img src="https://s2.loli.net/2023/04/01/O4AFiJQmlwjCRfU.png"></p>
<ol start="0">
<li>打开pycharm</li>
<li>点击左下部分的Ternimal</li>
<li>点击下三角符号</li>
<li>选择你安装了conda虚拟环境的wsl系统</li>
<li>在ternimal中像在原生linux中使用相关命令，如 conda env list; conda activate myenv…</li>
</ol>
<p>备注：pycharm为专业版2022.2</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>terminator终端配置</title>
    <url>/posts/a8de52a9/</url>
    <content><![CDATA[<h2 id="1-安装terminator"><a href="#1-安装terminator" class="headerlink" title="1.安装terminator"></a>1.安装terminator</h2><pre><code>sudo add-apt-repository ppa:gnome-terminator
sudo apt update
sudo apt install terminator
</code></pre>
<h2 id="2-配置-Shell（安装-zsh-和-oh-my-zsh）"><a href="#2-配置-Shell（安装-zsh-和-oh-my-zsh）" class="headerlink" title="2.配置 Shell（安装 zsh 和 oh-my-zsh）"></a>2.配置 Shell（安装 zsh 和 oh-my-zsh）</h2><pre><code># 安装 zsh
sudo apt install zsh
​
# 将 zsh 设置为系统默认 shell
chsh -s /bin/zsh

# 自动安装，如果你没安装 git 需要先安装 git
wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh
</code></pre>
<h2 id="3-美化terminator"><a href="#3-美化terminator" class="headerlink" title="3.美化terminator"></a>3.美化terminator</h2><ul>
<li><p>新建配置文件</p>
<pre><code>mkdir ~/.config/termintor &amp;&amp; gedit ~/.config/terminator/config
</code></pre>
</li>
<li><p>复制以下配置文件</p>
<pre><code>  [global_config]
    focus = system
    title_transmit_bg_color = &quot;#3e3838&quot;
    suppress_multiple_term_dialog = True
  [keybindings]
    split_vert = &lt;Shift&gt;&lt;Alt&gt;o
  [profiles]
    [[default]]
      background_color = &quot;#002b36&quot;
      background_darkness = 0.85
      cursor_color = &quot;#e8e8e8&quot;
      font = Ubuntu Mono 14
      foreground_color = &quot;#e8e8e8&quot;
      show_titlebar = False
      palette = &quot;#2d2d2d:#f2777a:#99cc99:#ffcc66:#6699cc:#cc99cc:#66cccc:#d3d0c8:#747369:#f2777a:#99cc99:#ffcc66:#6699cc:#cc99cc:#66cccc:#f2f0ec&quot;
      use_system_font = False
      copy_on_selection = True
  [layouts]
    [[default]]
      [[[child1]]]
        type = Terminal
        parent = window0
        profile = default
      [[[window0]]]
        type = Window
        parent = &quot;&quot;
        size = 900, 600
        position = 1000:500
  [plugins]
</code></pre>
<p>  如果你需要修改terminal的大小和起始位置，只需要修改size和position的值。这里设置的位置是4K显示器中间位置。</p>
</li>
</ul>
<h2 id="4-ZSH-插件安装"><a href="#4-ZSH-插件安装" class="headerlink" title="4.ZSH 插件安装"></a>4.ZSH 插件安装</h2><pre><code># 安装
apt install autojump

# 使用
j Document/
</code></pre>
<p>在~&#x2F;.zshrc文件中找到并修改为 plugins&#x3D;(git	autojump),添加刚刚安装的插件 autojump。</p>
<h2 id="5-zsh高级功能扩展"><a href="#5-zsh高级功能扩展" class="headerlink" title="5.zsh高级功能扩展"></a>5.zsh高级功能扩展</h2><p>在~&#x2F;.zshrc文件中添加</p>
<pre><code>alias cls=&#39;clear&#39;
alias ll=&#39;ls -l&#39;
alias la=&#39;ls -a&#39;
alias vi=&#39;vim&#39;
alias grep=&quot;grep --color=auto&quot;
</code></pre>
<p>即可配置命令的别名。</p>
<p>添加以下代码，可实现更高级的功能，代码来源<a href="https://github.com/skywind3000/vim/blob/master/etc/zshrc.zsh">github</a>，关于代码实现的功能参考作者<a href="https://www.zhihu.com/question/21418449/answer/300879747">韦易笑的知乎</a>。</p>
<pre><code># Antigen: https://github.com/zsh-users/antigen
ANTIGEN=&quot;$HOME/.local/bin/antigen.zsh&quot;

# Install antigen.zsh if not exist
if [ ! -f &quot;$ANTIGEN&quot; ]; then
  echo &quot;Installing antigen ...&quot;
  [ ! -d &quot;$HOME/.local&quot; ] &amp;&amp; mkdir -p &quot;$HOME/.local&quot; 2&gt; /dev/null
  [ ! -d &quot;$HOME/.local/bin&quot; ] &amp;&amp; mkdir -p &quot;$HOME/.local/bin&quot; 2&gt; /dev/null
  # [ ! -f &quot;$HOME/.z&quot; ] &amp;&amp; touch &quot;$HOME/.z&quot;
  URL=&quot;http://git.io/antigen&quot;
  TMPFILE=&quot;/tmp/antigen.zsh&quot;
  if [ -x &quot;$(which curl)&quot; ]; then
    curl -L &quot;$URL&quot; -o &quot;$TMPFILE&quot; 
  elif [ -x &quot;$(which wget)&quot; ]; then
    wget &quot;$URL&quot; -O &quot;$TMPFILE&quot; 
  else
    echo &quot;ERROR: please install curl or wget before installation !!&quot;
    exit
  fi
  if [ ! $? -eq 0 ]; then
    echo &quot;&quot;
    echo &quot;ERROR: downloading antigen.zsh ($URL) failed !!&quot;
    exit
  fi;
  echo &quot;move $TMPFILE to $ANTIGEN&quot;
  mv &quot;$TMPFILE&quot; &quot;$ANTIGEN&quot;
fi



# Load local bash/zsh compatible settings
INIT_SH_NOFUN=1
INIT_SH_NOLOG=1
DISABLE_Z_PLUGIN=1
[ -f &quot;$HOME/.local/etc/init.sh&quot; ] &amp;&amp; source &quot;$HOME/.local/etc/init.sh&quot;

# exit for non-interactive shell
[[ $- != *i* ]] &amp;&amp; return

# WSL (aka Bash for Windows) doesn&#39;t work well with BG_NICE
[ -d &quot;/mnt/c&quot; ] &amp;&amp; [[ &quot;$(uname -a)&quot; == *Microsoft* ]] &amp;&amp; unsetopt BG_NICE

# Initialize command prompt
export PS1=&quot;%n@%m:%~%# &quot;

# Initialize antigen
source &quot;$ANTIGEN&quot;

# Setup dir stack
DIRSTACKSIZE=10
setopt autopushd pushdminus pushdsilent pushdtohome pushdignoredups cdablevars
alias d=&#39;dirs -v | head -10&#39;

# Disable correction
unsetopt correct_all
unsetopt correct
DISABLE_CORRECTION=&quot;true&quot; 

# Enable 256 color to make auto-suggestions look nice
export TERM=&quot;xterm-256color&quot;

ZSH_AUTOSUGGEST_USE_ASYNC=1

# Declare modules
zstyle &#39;:prezto:*:*&#39; color &#39;yes&#39;
zstyle &#39;:prezto:module:editor&#39; key-bindings &#39;emacs&#39;
zstyle &#39;:prezto:module:git:alias&#39; skip &#39;yes&#39;
zstyle &#39;:prezto:module:prompt&#39; theme &#39;redhat&#39;
zstyle &#39;:prezto:module:prompt&#39; pwd-length &#39;short&#39;
zstyle &#39;:prezto:module:terminal&#39; auto-title &#39;yes&#39;
zstyle &#39;:prezto:module:autosuggestions&#39; color &#39;yes&#39;
zstyle &#39;:prezto:module:python&#39; autovenv &#39;yes&#39;
zstyle &#39;:prezto:load&#39; pmodule \
  &#39;environment&#39; \
  &#39;editor&#39; \
  &#39;history&#39; \
  &#39;git&#39; \
  &#39;utility&#39; \
  &#39;completion&#39; \
  &#39;history-substring-search&#39; \
  &#39;autosuggestions&#39; \
  &#39;prompt&#39; \

  # &#39;autosuggestions&#39; \

# Initialize prezto
antigen use prezto


# default bundles
antigen bundle rupa/z z.sh
antigen bundle Vifon/deer
antigen bundle zdharma-continuum/fast-syntax-highlighting
# antigen bundle zsh-users/zsh-autosuggestions

antigen bundle willghatch/zsh-cdr
# antigen bundle zsh-users/zaw

# check login shell
if [[ -o login ]]; then
  [ -f &quot;$HOME/.local/etc/login.sh&quot; ] &amp;&amp; source &quot;$HOME/.local/etc/login.sh&quot;
  [ -f &quot;$HOME/.local/etc/login.zsh&quot; ] &amp;&amp; source &quot;$HOME/.local/etc/login.zsh&quot;
fi

# syntax color definition
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)

typeset -A ZSH_HIGHLIGHT_STYLES

# ZSH_HIGHLIGHT_STYLES[command]=fg=white,bold
# ZSH_HIGHLIGHT_STYLES[alias]=&#39;fg=magenta,bold&#39;

ZSH_HIGHLIGHT_STYLES[default]=none
ZSH_HIGHLIGHT_STYLES[unknown-token]=fg=009
ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=009,standout
ZSH_HIGHLIGHT_STYLES[alias]=fg=cyan,bold
ZSH_HIGHLIGHT_STYLES[builtin]=fg=cyan,bold
ZSH_HIGHLIGHT_STYLES[function]=fg=cyan,bold
ZSH_HIGHLIGHT_STYLES[command]=fg=white,bold
ZSH_HIGHLIGHT_STYLES[precommand]=fg=white,underline
ZSH_HIGHLIGHT_STYLES[commandseparator]=none
ZSH_HIGHLIGHT_STYLES[hashed-command]=fg=009
ZSH_HIGHLIGHT_STYLES[path]=fg=214,underline
ZSH_HIGHLIGHT_STYLES[globbing]=fg=063
ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=white,underline
ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=none
ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=none
ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=none
ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=063
ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=063
ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=009
ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=009
ZSH_HIGHLIGHT_STYLES[assign]=none

# load local config
[ -f &quot;$HOME/.local/etc/config.zsh&quot; ] &amp;&amp; source &quot;$HOME/.local/etc/config.zsh&quot; 
[ -f &quot;$HOME/.local/etc/local.zsh&quot; ] &amp;&amp; source &quot;$HOME/.local/etc/local.zsh&quot;

antigen apply

# work around: fast syntax highlighting may crash zsh without this
FAST_HIGHLIGHT[chroma-git]=&quot;chroma/-ogit.ch&quot;

# options
unsetopt correct_all
unsetopt share_history
setopt prompt_subst
unsetopt prompt_cr prompt_sp

setopt BANG_HIST                 # Treat the &#39;!&#39; character specially during expansion.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
# setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don&#39;t record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don&#39;t record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don&#39;t write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY # Don&#39;t execute immediately upon history expansion.

# setup for deer
autoload -U deer
zle -N deer

# default keymap
bindkey -s &#39;\ee&#39; &#39;vim\n&#39;
bindkey &#39;\eh&#39; backward-char
bindkey &#39;\el&#39; forward-char
bindkey &#39;\ej&#39; down-line-or-history
bindkey &#39;\ek&#39; up-line-or-history
bindkey &#39;\eH&#39; backward-word
bindkey &#39;\eL&#39; forward-word
bindkey &#39;\eJ&#39; beginning-of-line
bindkey &#39;\eK&#39; end-of-line

bindkey -s &#39;\eo&#39; &#39;cd ..\n&#39;
bindkey -s &#39;\e;&#39; &#39;ll\n&#39;

bindkey &#39;\e[1;3D&#39; backward-word
bindkey &#39;\e[1;3C&#39; forward-word
bindkey &#39;\e[1;3A&#39; beginning-of-line
bindkey &#39;\e[1;3B&#39; end-of-line

bindkey &#39;\ev&#39; deer
bindkey -s &#39;\eu&#39; &#39;ranger_cd\n&#39;
bindkey -s &#39;\eOS&#39; &#39;vim &#39;


# source function.sh if it exists
[ -f &quot;$HOME/.local/etc/function.sh&quot; ] &amp;&amp; . &quot;$HOME/.local/etc/function.sh&quot;

# Disable correction
unsetopt correct_all
unsetopt correct
DISABLE_CORRECTION=&quot;true&quot; 

# completion detail
zstyle &#39;:completion:*:complete:-command-:*:*&#39; ignored-patterns &#39;*.pdf|*.exe|*.dll&#39;
zstyle &#39;:completion:*:*sh:*:&#39; tag-order files
</code></pre>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu挂载新硬盘到home目录下</title>
    <url>/posts/ffe6c5d4/</url>
    <content><![CDATA[<p>1.查看所有硬盘信息(找到需要挂载硬盘的路径,如&#x2F;dev&#x2F;nvme1n1)</p>
<pre><code>sudo fdisk -lu
</code></pre>
<p>2.格式化硬盘</p>
<pre><code>sudo mkfs -t ext4 /dev/nvme1n1
</code></pre>
<p>3.创建挂载目录</p>
<pre><code>sudo mkdir /home/usrname/mydata

chmod -R 777 /home/usrname/mydata
</code></pre>
<p>  username是你自己的用户名</p>
<p>4.手动挂载分区(nvme1n1:想要挂载的分区 mydata:分区挂载的目录)</p>
<pre><code>mount /dev/nvme1n1 /home/usrname/mydata
</code></pre>
<p>5.查看想要挂载分区的UUID</p>
<pre><code>sudo blkid /dev/nvme1n1
</code></pre>
<p>6.修改开机挂载文件</p>
<pre><code>sudo nano /etc/fstab    
</code></pre>
<p>7.文档末尾添加挂载信息</p>
<pre><code># [分区UUID] [挂载目录] [分区格式] [默认配置] [开机不检查硬盘] [交换分区]
UUID=1234-1234-1234 /home/usrname/mydata ext4 defaults 0 0
</code></pre>
<p>8.取消挂载</p>
<pre><code>umount /home/usrname/mydata
</code></pre>
<p>9.查看硬盘挂载情况</p>
<pre><code>sudo lsblk

df -kh 
</code></pre>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>utorrent代理设置</title>
    <url>/posts/2431c14c/</url>
    <content><![CDATA[<p>参照下图</p>
<p><img src="https://s2.loli.net/2022/02/09/sGulEeCWLF76X9n.png"></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习：Windows11 VS WSL2 VS Ubuntu 性能对比，pytorch2.0性能测试！</title>
    <url>/posts/886ba8c3/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2023/04/01/1JmriBjDFceTC4s.png" alt="性能对比" title="Windows11 VS WSL2 VS Ubuntu 性能对比"></p>
<p>测试代码：<a href="https://github.com/pytorch/examples/tree/main/mnist">https://github.com/pytorch/examples/tree/main/mnist</a></p>
<p>Windows11_pt2.0指 window11，cuda11.8, pytorch 2.0<br>Windows11_pt1.13指 window11，cuda11.7, pytorch 1.13<br>其他的命名同上。</p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>使用zerotier实现ssh远程连接wsl2</title>
    <url>/posts/53c7e35a/</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li>前言</li>
<li>准备工作</li>
<li>wsl2部署ssh</li>
<li>windows本地端连接</li>
<li>手机客户端连接</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ssh连接wsl2可以方便我们远程管理，其方法和直接在ubuntu中设置ssh如出一辙。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li><p>注册一个zerotier的账户</p>
<p><a href="https://www.zerotier.com/">注册网址</a></p>
<p><img src="https://s2.loli.net/2023/12/19/csVgi7SzeAnZCXD.png"></p>
<p>注册成功之后点击 Create A Network</p>
<p><img src="https://s2.loli.net/2023/12/19/CIBteLaT8qEQcpz.png"></p>
<p>可以看到我们的NETWORK ID，点击ID 可以看到我们这个网络的具体配置信息。 我们可以更改Name，Description，IPV4的网段等等信息。Access Control 那里一定要是Private，这样才能保护我们的连接隐私性。</p>
<p><img src="/image.png" alt="Alt text"></p>
</li>
</ol>
<h2 id="wsl2-部署ssh"><a href="#wsl2-部署ssh" class="headerlink" title="wsl2 部署ssh"></a>wsl2 部署ssh</h2><ol>
<li><p>在 Ubuntu 中安装 SSH 服务器:</p>
<ul>
<li>打开 WSL2 的 Ubuntu 终端。</li>
<li>更新包列表：sudo apt update</li>
<li>安装 SSH 服务器：sudo apt install openssh-server</li>
<li>启动 SSH 服务：sudo service ssh start</li>
</ul>
</li>
<li><p>安装 ZeroTier One:</p>
<ul>
<li>在 Ubuntu 终端中安装 ZeroTier One：curl -s <a href="https://install.zerotier.com/">https://install.zerotier.com</a> | sudo bash</li>
<li>加入 ZeroTier 网络：sudo zerotier-cli join [network_id]（将 [network_id] 替换为您的 ZeroTier 网络 ID）。</li>
<li>在zerotier网页Members列表勾选刚刚加入网络的设备<br> <img src="https://s2.loli.net/2023/12/19/BfvLz4AXRUVrOnb.png"></li>
</ul>
</li>
<li><p>配置 Windows 防火墙:</p>
<ul>
<li>允许 WSL2 的 Ubuntu 通过 Windows 防火墙。可以在 Windows 防火墙设置中添加一个入站规则，允许 TCP 端口 22。<br><img src="https://s2.loli.net/2023/12/19/6eBdW89SuUyofKt.png"></li>
</ul>
</li>
</ol>
<h2 id="windows本地端连接"><a href="#windows本地端连接" class="headerlink" title="windows本地端连接"></a>windows本地端连接</h2><p>在zerotier官网下载<a href="https://www.zerotier.com/download/">windows客户端</a>安装，然后右键托盘区域的软件图标，选择加入我们刚刚创建的网络。同样的，也要在zerotier网页Members列表勾选我们刚刚加入网络的设备。</p>
<p>使用你常用的ssh客户端，比如<a href="https://www.putty.org/">puty</a>，<a href="https://www.hostbuf.com/">finalshell</a>等。<br>然后我们在ssh客户端输入wsl2设备的ip(members列表上显示的)，端口22，即可连接。<br><img src="https://s2.loli.net/2023/12/19/dvQmcBzWrDgAH3w.png"></p>
<p><img src="https://s2.loli.net/2023/12/19/p5ETHyaMBFqxznK.png"></p>
<p><em>注意：</em> 你应该在另一台windows设备上安装zerotier客户端连接wsl2。如果你同时启动了wsl2和windows环境下的zerotier,那么windows环境下的zerotier将会闪退。这可能是一个Bug,我已经给官方反馈了。<br><em>注意1：</em> 如果你安装了多个wsl 系统，一个系统占用22端口后，其他系统就没法使用，开启ssh会报错。因此当你需要使用ssh时，只开启那一个系统即可。<br><em>提示：</em> 你只需要在wsl2中安装zerotier即可使用其他设备远程连接。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
</search>
